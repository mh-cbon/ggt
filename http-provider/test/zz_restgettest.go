package tester

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// RestGetTest is an httper of GetTest.
// GetTest ...
type RestGetTest struct {
	embed GetTest
	Log   ggt.HTTPLogger
}

// NewRestGetTest constructs an httper of GetTest
func NewRestGetTest(embed GetTest) *RestGetTest {
	ret := &RestGetTest{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestGetTest")
	return ret
}

// ValueParam invoke GetTest.ValueParam using the request body as a json payload.
// ValueParam ...
func (t *RestGetTest) ValueParam(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestGetTest", "ValueParam")

	xxURLValues := r.URL.Query()
	var getParam string
	if _, ok := xxURLValues["param"]; ok {
		xxTmpgetParam := xxURLValues.Get("param")
		getParam = xxTmpgetParam
	}

	t.embed.ValueParam(getParam)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestGetTest", "ValueParam")
}

// RefParam invoke GetTest.RefParam using the request body as a json payload.
// RefParam ...
func (t *RestGetTest) RefParam(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestGetTest", "RefParam")

	xxURLValues := r.URL.Query()
	var getParam *string
	if _, ok := xxURLValues["param"]; ok {
		xxTmpgetParam := xxURLValues.Get("param")
		getParam = &xxTmpgetParam
	}

	t.embed.RefParam(getParam)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestGetTest", "RefParam")
}

// MultipleParam invoke GetTest.MultipleParam using the request body as a json payload.
// MultipleParam ...
func (t *RestGetTest) MultipleParam(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestGetTest", "MultipleParam")

	xxURLValues := r.URL.Query()
	var getParam *string
	if _, ok := xxURLValues["param"]; ok {
		xxTmpgetParam := xxURLValues.Get("param")
		getParam = &xxTmpgetParam
	}
	var getID string
	if _, ok := xxURLValues["id"]; ok {
		xxTmpgetID := xxURLValues.Get("id")
		getID = xxTmpgetID
	}

	t.embed.MultipleParam(getParam, getID)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestGetTest", "MultipleParam")
}

// RestGetTestDescriptor describe a *RestGetTest
type RestGetTestDescriptor struct {
	ggt.TypeDescriptor
	about               *RestGetTest
	methodValueParam    *ggt.MethodDescriptor
	methodRefParam      *ggt.MethodDescriptor
	methodMultipleParam *ggt.MethodDescriptor
}

// NewRestGetTestDescriptor describe a *RestGetTest
func NewRestGetTestDescriptor(about *RestGetTest) *RestGetTestDescriptor {
	ret := &RestGetTestDescriptor{about: about}
	ret.methodValueParam = &ggt.MethodDescriptor{
		Name:    "ValueParam",
		Handler: about.ValueParam,
		Route:   "ValueParam",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodValueParam)
	ret.methodRefParam = &ggt.MethodDescriptor{
		Name:    "RefParam",
		Handler: about.RefParam,
		Route:   "RefParam",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodRefParam)
	ret.methodMultipleParam = &ggt.MethodDescriptor{
		Name:    "MultipleParam",
		Handler: about.MultipleParam,
		Route:   "MultipleParam",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMultipleParam)
	return ret
}

// ValueParam returns a MethodDescriptor
func (t *RestGetTestDescriptor) ValueParam() *ggt.MethodDescriptor { return t.methodValueParam }

// RefParam returns a MethodDescriptor
func (t *RestGetTestDescriptor) RefParam() *ggt.MethodDescriptor { return t.methodRefParam }

// MultipleParam returns a MethodDescriptor
func (t *RestGetTestDescriptor) MultipleParam() *ggt.MethodDescriptor { return t.methodMultipleParam }
