package login

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	time "time"
)

// HashedUsers implements a typed slice of *HashedUser
type HashedUsers struct{ items []*HashedUser }

// NewHashedUsers creates a new typed slice of *HashedUser
func NewHashedUsers() *HashedUsers {
	return &HashedUsers{items: []*HashedUser{}}
}

// Push appends every *HashedUser
func (t *HashedUsers) Push(x ...*HashedUser) *HashedUsers {
	t.items = append(t.items, x...)
	return t
}

// Unshift prepends every *HashedUser
func (t *HashedUsers) Unshift(x ...*HashedUser) *HashedUsers {
	t.items = append(x, t.items...)
	return t
}

// Pop removes then returns the last *HashedUser.
func (t *HashedUsers) Pop() *HashedUser {
	var ret *HashedUser
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
		t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
	}
	return ret
}

// Shift removes then returns the first *HashedUser.
func (t *HashedUsers) Shift() *HashedUser {
	var ret *HashedUser
	if len(t.items) > 0 {
		ret = t.items[0]
		t.items = append(t.items[:0], t.items[1:]...)
	}
	return ret
}

// Index of given *HashedUser. It must implements Ider interface.
func (t *HashedUsers) Index(s *HashedUser) int {
	ret := -1
	for i, item := range t.items {
		if s.GetID() == item.GetID() {
			ret = i
			break
		}
	}
	return ret
}

// Contains returns true if s in is t.
func (t *HashedUsers) Contains(s *HashedUser) bool {
	return t.Index(s) > -1
}

// RemoveAt removes a *HashedUser at index i.
func (t *HashedUsers) RemoveAt(i int) bool {
	if i >= 0 && i < len(t.items) {
		t.items = append(t.items[:i], t.items[i+1:]...)
		return true
	}
	return false
}

// Remove removes given *HashedUser
func (t *HashedUsers) Remove(s *HashedUser) bool {
	if i := t.Index(s); i > -1 {
		t.RemoveAt(i)
		return true
	}
	return false
}

// InsertAt adds given *HashedUser at index i
func (t *HashedUsers) InsertAt(i int, s *HashedUser) *HashedUsers {
	if i < 0 || i >= len(t.items) {
		return t
	}
	res := []*HashedUser{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}

// Splice removes and returns a slice of *HashedUser, starting at start, ending at start+length.
// If any s is provided, they are inserted in place of the removed slice.
func (t *HashedUsers) Splice(start int, length int, s ...*HashedUser) []*HashedUser {
	var ret []*HashedUser
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
	return ret
}

// Slice returns a copied slice of *HashedUser, starting at start, ending at start+length.
func (t *HashedUsers) Slice(start int, length int) []*HashedUser {
	var ret []*HashedUser
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start : start+length]
	}
	return ret
}

// Reverse the slice.
func (t *HashedUsers) Reverse() *HashedUsers {
	for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
		t.items[i], t.items[j] = t.items[j], t.items[i]
	}
	return t
}

// Len of the slice.
func (t *HashedUsers) Len() int {
	return len(t.items)
}

// Set the slice.
func (t *HashedUsers) Set(x []*HashedUser) *HashedUsers {
	t.items = append(t.items[:0], x...)
	return t
}

// Get the slice.
func (t *HashedUsers) Get() []*HashedUser {
	return t.items
}

// At return the item at index i.
func (t *HashedUsers) At(i int) *HashedUser {
	return t.items[i]
}

// Filter return a new HashedUsers with all items satisfying f.
func (t *HashedUsers) Filter(filters ...func(*HashedUser) bool) *HashedUsers {
	ret := NewHashedUsers()
	for _, i := range t.items {
		ok := true
		for _, f := range filters {
			ok = ok && f(i)
			if !ok {
				break
			}
		}
		if ok {
			ret.Push(i)
		}
	}
	return ret
}

// Map return a new HashedUsers of each items modified by f.
func (t *HashedUsers) Map(mappers ...func(*HashedUser) *HashedUser) *HashedUsers {
	ret := NewHashedUsers()
	for _, i := range t.items {
		val := i
		for _, m := range mappers {
			val = m(val)
			if val == nil {
				break
			}
		}
		if val != nil {
			ret.Push(val)
		}
	}
	return ret
}

// First returns the first value or default.
func (t *HashedUsers) First() *HashedUser {
	var ret *HashedUser
	if len(t.items) > 0 {
		ret = t.items[0]
	}
	return ret
}

// Last returns the last value or default.
func (t *HashedUsers) Last() *HashedUser {
	var ret *HashedUser
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
	}
	return ret
}

// Empty returns true if the slice is empty.
func (t *HashedUsers) Empty() bool {
	return len(t.items) == 0
}

// NotEmpty returns true if the slice is not empty.
func (t *HashedUsers) NotEmpty() bool {
	return len(t.items) > 0
}

// Transact execute one op.
func (t *HashedUsers) Transact(F ...func(*HashedUsers)) {
	for _, f := range F {
		f(t)
	}
}

//UnmarshalJSON JSON unserializes HashedUsers
func (t *HashedUsers) UnmarshalJSON(b []byte) error {
	var items []*HashedUser
	if err := json.Unmarshal(b, &items); err != nil {
		return err
	}
	t.items = items
	return nil
}

//MarshalJSON JSON serializes HashedUsers
func (t *HashedUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.items)
}

// HashedUsersContract are the requirements of HashedUsers
type HashedUsersContract interface {
	Push(x ...*HashedUser) *HashedUsers
	Unshift(x ...*HashedUser) *HashedUsers
	Pop() *HashedUser
	Shift() *HashedUser
	Index(s *HashedUser) int
	Contains(s *HashedUser) bool
	RemoveAt(i int) bool
	Remove(s *HashedUser) bool
	InsertAt(i int, s *HashedUser) *HashedUsers
	Splice(start int, length int, s ...*HashedUser) []*HashedUser
	Slice(start int, length int) []*HashedUser
	Reverse() *HashedUsers
	Set(x []*HashedUser) *HashedUsers
	Get() []*HashedUser
	At(i int) *HashedUser
	Filter(filters ...func(*HashedUser) bool) *HashedUsers
	Map(mappers ...func(*HashedUser) *HashedUser) *HashedUsers
	First() *HashedUser
	Last() *HashedUser
	Transact(...func(*HashedUsers))
	Len() int
	Empty() bool
	NotEmpty() bool
}

// FilterHashedUsers provides filters for a struct.
var FilterHashedUsers = struct {
	ByLogin       func(...string) func(*HashedUser) bool
	NotLogin      func(...string) func(*HashedUser) bool
	ByPassword    func(...string) func(*HashedUser) bool
	NotPassword   func(...string) func(*HashedUser) bool
	ByHash        func(...string) func(*HashedUser) bool
	NotHash       func(...string) func(*HashedUser) bool
	ByLastLogin   func(...time.Time) func(*HashedUser) bool
	NotLastLogin  func(...time.Time) func(*HashedUser) bool
	ByLastLogout  func(...time.Time) func(*HashedUser) bool
	NotLastLogout func(...time.Time) func(*HashedUser) bool
}{
	ByLogin: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Login == v {
					return true
				}
			}
			return false
		}
	},
	NotLogin: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Login == v {
					return false
				}
			}
			return true
		}
	},
	ByPassword: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Password == v {
					return true
				}
			}
			return false
		}
	},
	NotPassword: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Password == v {
					return false
				}
			}
			return true
		}
	},
	ByHash: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Hash == v {
					return true
				}
			}
			return false
		}
	},
	NotHash: func(all ...string) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.Hash == v {
					return false
				}
			}
			return true
		}
	},
	ByLastLogin: func(all ...time.Time) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.LastLogin == v {
					return true
				}
			}
			return false
		}
	},
	NotLastLogin: func(all ...time.Time) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.LastLogin == v {
					return false
				}
			}
			return true
		}
	},
	ByLastLogout: func(all ...time.Time) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.LastLogout == v {
					return true
				}
			}
			return false
		}
	},
	NotLastLogout: func(all ...time.Time) func(*HashedUser) bool {
		return func(o *HashedUser) bool {
			for _, v := range all {
				if o.LastLogout == v {
					return false
				}
			}
			return true
		}
	},
}

// SetterHashedUsers provides sets properties.
var SetterHashedUsers = struct {
	SetLogin      func(string) func(*HashedUser) *HashedUser
	SetPassword   func(string) func(*HashedUser) *HashedUser
	SetHash       func(string) func(*HashedUser) *HashedUser
	SetLastLogin  func(time.Time) func(*HashedUser) *HashedUser
	SetLastLogout func(time.Time) func(*HashedUser) *HashedUser
}{
	SetLogin: func(v string) func(*HashedUser) *HashedUser {
		return func(o *HashedUser) *HashedUser {
			o.Login = v
			return o
		}
	},
	SetPassword: func(v string) func(*HashedUser) *HashedUser {
		return func(o *HashedUser) *HashedUser {
			o.Password = v
			return o
		}
	},
	SetHash: func(v string) func(*HashedUser) *HashedUser {
		return func(o *HashedUser) *HashedUser {
			o.Hash = v
			return o
		}
	},
	SetLastLogin: func(v time.Time) func(*HashedUser) *HashedUser {
		return func(o *HashedUser) *HashedUser {
			o.LastLogin = v
			return o
		}
	},
	SetLastLogout: func(v time.Time) func(*HashedUser) *HashedUser {
		return func(o *HashedUser) *HashedUser {
			o.LastLogout = v
			return o
		}
	},
}
