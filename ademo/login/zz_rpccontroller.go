package login

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
	"time"
)

var xxe54b0b93f158f759b6dd1585bc54a7965806c533 = strconv.Atoi
var xx72debe57433968dd2f490b9bde2dee8c155e06bc = io.Copy
var xx0921489b227b5f67966848e3dde3a344935f476d = http.StatusOK

// RPCController is an httper of Controller.
// Controller of user login
type RPCController struct {
	embed Controller
	Log   ggt.HTTPLogger
}

// NewRPCController constructs an httper of Controller
func NewRPCController(embed Controller) *RPCController {
	ret := &RPCController{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCController")
	return ret
}

// Login invoke Controller.Login using the request body as a json payload.
// Login user by its login/password
//
// @route /login
// @methods POST
func (t *RPCController) Login(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Login")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPCController", "Login")
			t.embed.Finalizer(w, r, err)

			return
		}

	}
	input := struct {
		Arg0 string
		Arg1 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCController", "Login")
		t.embed.Finalizer(w, r, decErr)

		return
	}

	jsonResBody, login, err := t.embed.Login(input.Arg0, input.Arg1)
	output := struct {
		Arg0 *User
		Arg1 *http.Cookie
		Arg2 error
	}{
		Arg0: jsonResBody,
		Arg1: login,
		Arg2: err,
	}

	if output.Arg1 == nil {
		http.SetCookie(w, &http.Cookie{
			Name:    "login",
			Expires: time.Now().Add(-time.Hour * 24 * 100),
		})
	} else {
		http.SetCookie(w, output.Arg1)
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Login")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Login")
}

// Logout invoke Controller.Logout using the request body as a json payload.
// Logout user by its login/password
//
// @route /logout
// @methods POST
func (t *RPCController) Logout(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Logout")
	input := struct {
		Arg0 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCController", "Logout")
		t.embed.Finalizer(w, r, decErr)

		return
	}

	login, err := t.embed.Logout(input.Arg0)
	output := struct {
		Arg0 *http.Cookie
		Arg1 error
	}{
		Arg0: login,
		Arg1: err,
	}

	if output.Arg0 == nil {
		http.SetCookie(w, &http.Cookie{
			Name:    "login",
			Expires: time.Now().Add(-time.Hour * 24 * 100),
		})
	} else {
		http.SetCookie(w, output.Arg0)
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Logout")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Logout")
}

// Create invoke Controller.Create using the request body as a json payload.
// Create user by its login/password
//
// @route /create
// @methods POST
func (t *RPCController) Create(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Create")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPCController", "Create")
			t.embed.Finalizer(w, r, err)

			return
		}

	}
	input := struct {
		Arg0 string
		Arg1 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCController", "Create")
		t.embed.Finalizer(w, r, decErr)

		return
	}

	jsonResBody, err := t.embed.Create(input.Arg0, input.Arg1)
	output := struct {
		Arg0 *User
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Create")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Create")
}

// RPCControllerDescriptor describe a *RPCController
type RPCControllerDescriptor struct {
	ggt.TypeDescriptor
	about        *RPCController
	methodLogin  *ggt.MethodDescriptor
	methodLogout *ggt.MethodDescriptor
	methodCreate *ggt.MethodDescriptor
}

// NewRPCControllerDescriptor describe a *RPCController
func NewRPCControllerDescriptor(about *RPCController) *RPCControllerDescriptor {
	ret := &RPCControllerDescriptor{about: about}
	ret.methodLogin = &ggt.MethodDescriptor{
		Name:    "Login",
		Handler: about.Login,
		Route:   "/login",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodLogin)
	ret.methodLogout = &ggt.MethodDescriptor{
		Name:    "Logout",
		Handler: about.Logout,
		Route:   "/logout",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodLogout)
	ret.methodCreate = &ggt.MethodDescriptor{
		Name:    "Create",
		Handler: about.Create,
		Route:   "/create",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodCreate)
	return ret
}

// Login returns a MethodDescriptor
func (t *RPCControllerDescriptor) Login() *ggt.MethodDescriptor { return t.methodLogin }

// Logout returns a MethodDescriptor
func (t *RPCControllerDescriptor) Logout() *ggt.MethodDescriptor { return t.methodLogout }

// Create returns a MethodDescriptor
func (t *RPCControllerDescriptor) Create() *ggt.MethodDescriptor { return t.methodCreate }
