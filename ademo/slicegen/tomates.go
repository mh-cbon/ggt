package slicegen

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	model "github.com/mh-cbon/ggt/ademo/model"
)

// Tomates implements a typed slice of model.Tomate
type Tomates struct{ items []model.Tomate }

// NewTomates creates a new typed slice of model.Tomate
func NewTomates() *Tomates {
	return &Tomates{items: []model.Tomate{}}
}

// Push appends every model.Tomate
func (t *Tomates) Push(x ...model.Tomate) *Tomates {
	t.items = append(t.items, x...)
	return t
}

// Unshift prepends every model.Tomate
func (t *Tomates) Unshift(x ...model.Tomate) *Tomates {
	t.items = append(x, t.items...)
	return t
}

// Pop removes then returns the last model.Tomate.
func (t *Tomates) Pop() model.Tomate {
	var ret model.Tomate
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
		t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
	}
	return ret
}

// Shift removes then returns the first model.Tomate.
func (t *Tomates) Shift() model.Tomate {
	var ret model.Tomate
	if len(t.items) > 0 {
		ret = t.items[0]
		t.items = append(t.items[:0], t.items[1:]...)
	}
	return ret
}

// Index of given model.Tomate. It must implements Ider interface.
func (t *Tomates) Index(s model.Tomate) int {
	ret := -1
	for i, item := range t.items {
		if s.GetID() == item.GetID() {
			ret = i
			break
		}
	}
	return ret
}

// Contains returns true if s in is t.
func (t *Tomates) Contains(s model.Tomate) bool {
	return t.Index(s) > -1
}

// RemoveAt removes a model.Tomate at index i.
func (t *Tomates) RemoveAt(i int) bool {
	if i >= 0 && i < len(t.items) {
		t.items = append(t.items[:i], t.items[i+1:]...)
		return true
	}
	return false
}

// Remove removes given model.Tomate
func (t *Tomates) Remove(s model.Tomate) bool {
	if i := t.Index(s); i > -1 {
		t.RemoveAt(i)
		return true
	}
	return false
}

// InsertAt adds given model.Tomate at index i
func (t *Tomates) InsertAt(i int, s model.Tomate) *Tomates {
	if i < 0 || i >= len(t.items) {
		return t
	}
	res := []model.Tomate{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}

// Splice removes and returns a slice of model.Tomate, starting at start, ending at start+length.
// If any s is provided, they are inserted in place of the removed slice.
func (t *Tomates) Splice(start int, length int, s ...model.Tomate) []model.Tomate {
	var ret []model.Tomate
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
	return ret
}

// Slice returns a copied slice of model.Tomate, starting at start, ending at start+length.
func (t *Tomates) Slice(start int, length int) []model.Tomate {
	var ret []model.Tomate
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start : start+length]
	}
	return ret
}

// Reverse the slice.
func (t *Tomates) Reverse() *Tomates {
	for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
		t.items[i], t.items[j] = t.items[j], t.items[i]
	}
	return t
}

// Len of the slice.
func (t *Tomates) Len() int {
	return len(t.items)
}

// Set the slice.
func (t *Tomates) Set(x []model.Tomate) *Tomates {
	t.items = append(t.items[:0], x...)
	return t
}

// Get the slice.
func (t *Tomates) Get() []model.Tomate {
	return t.items
}

// At return the item at index i.
func (t *Tomates) At(i int) model.Tomate {
	return t.items[i]
}

// Filter return a new Tomates with all items satisfying f.
func (t *Tomates) Filter(filters ...func(model.Tomate) bool) *Tomates {
	ret := NewTomates()
	for _, i := range t.items {
		ok := true
		for _, f := range filters {
			ok = ok && f(i)
			if !ok {
				break
			}
		}
		if ok {
			ret.Push(i)
		}
	}
	return ret
}

// Map return a new Tomates of each items modified by f.
func (t *Tomates) Map(mappers ...func(model.Tomate) model.Tomate) *Tomates {
	ret := NewTomates()
	for _, i := range t.items {
		val := i
		for _, m := range mappers {
			val = m(val)
		}
		ret.Push(val)
	}
	return ret
}

// First returns the first value or default.
func (t *Tomates) First() model.Tomate {
	var ret model.Tomate
	if len(t.items) > 0 {
		ret = t.items[0]
	}
	return ret
}

// Last returns the last value or default.
func (t *Tomates) Last() model.Tomate {
	var ret model.Tomate
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
	}
	return ret
}

// Empty returns true if the slice is empty.
func (t *Tomates) Empty() bool {
	return len(t.items) == 0
}

// Transact execute one op.
func (t *Tomates) Transact(f func(*Tomates)) {
	f(t)
}

//UnmarshalJSON JSON unserializes Tomates
func (t *Tomates) UnmarshalJSON(b []byte) error {
	var items []model.Tomate
	if err := json.Unmarshal(b, &items); err != nil {
		return err
	}
	t.items = items
	return nil
}

//MarshalJSON JSON serializes Tomates
func (t *Tomates) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.items)
}

// TomatesContract are the requirements of Tomates
type TomatesContract interface {
	Push(x ...model.Tomate) *Tomates
	Unshift(x ...model.Tomate) *Tomates
	Pop() model.Tomate
	Shift() model.Tomate
	Index(s model.Tomate) int
	Contains(s model.Tomate) bool
	RemoveAt(i int) bool
	Remove(s model.Tomate) bool
	InsertAt(i int, s model.Tomate) *Tomates
	Splice(start int, length int, s ...model.Tomate) []model.Tomate
	Slice(start int, length int) []model.Tomate
	Reverse() *Tomates
	Set(x []model.Tomate) *Tomates
	Get() []model.Tomate
	At(i int) model.Tomate
	Filter(filters ...func(model.Tomate) bool) *Tomates
	Map(mappers ...func(model.Tomate) model.Tomate) *Tomates
	First() model.Tomate
	Last() model.Tomate
	Transact(func(*Tomates))
	Len() int
	Empty() bool
}

// FilterTomates provides filters for a struct.
var FilterTomates = struct {
	ByID    func(string) func(model.Tomate) bool
	ByColor func(string) func(model.Tomate) bool
}{
	ByID:    func(v string) func(model.Tomate) bool { return func(o model.Tomate) bool { return o.ID == v } },
	ByColor: func(v string) func(model.Tomate) bool { return func(o model.Tomate) bool { return o.Color == v } },
}
