package tomate

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"bytes"
	"context"
	json "encoding/json"
	"errors"
	"fmt"
	"github.com/gorilla/mux"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// RestClient is an http-clienter of Controller.
// Controller of tomatoes.
type RestClient struct {
	router *mux.Router
	client *http.Client
}

// NewRestClient constructs an http-clienter of Controller
func NewRestClient(router *mux.Router, client *http.Client) *RestClient {
	if client == nil {
		client = http.DefaultClient
	}
	ret := &RestClient{
		router: router,
		client: client,
	}
	return ret
}

var xx90888eb014329c49645575e5fa5cbc0be199c6f1 = bytes.MinRead
var xx9355ce1a0b0f81ae6deae2ab6f9e81a1fe9f4a36 = fmt.Println
var xx5a2d364980b169ee03e43a56248e5ffe2c777949 = url.PathEscape
var xx65c5042050d01179c8bf5c2d68ff7b666e89b28b = strings.ToUpper
var xx63b054611e3968c9e01a9e074f041b578c37e698 = context.Canceled
var xx27d6e81bcee44cbebc51244be3f5738c0a0f0a78 = mux.Vars
var xx047eb6cc5ec02dd6ceaffbf24d3c6b91faa9e161 = io.Copy
var xx28670589f45cfaa5c61622d22ad70c9d7994ab8f = http.StatusOK

// GetByID constructs a request to /read/{id:[0-9]+}
func (t RestClient) GetByID(routeID string) (jsonResBody *Tomate, err error) {
	sReqURL := "/read/{id:[0-9]+}"
	sReqURL = strings.Replace(sReqURL, "{id:[0-9]+}", fmt.Sprintf("%v", routeID), 1)
	reqURL, URLerr := url.ParseRequestURI(sReqURL)
	if URLerr != nil {
		return nil, errors.New("todo")
	}
	finalURL := reqURL.String()

	req, reqErr := http.NewRequest("GET", finalURL, nil)
	if reqErr != nil {
		return nil, errors.New("todo")
	}

	{
		res, resErr := t.client.Do(req)
		if resErr != nil {
			return nil, errors.New("todo")
		}

		decErr := json.NewDecoder(res.Body).Decode(jsonResBody)
		if decErr != nil {
			return nil, errors.New("todo")
		}

	}

	return jsonResBody, err
}

// SimilarColor constructs a request to /similar/color/{color}
func (t RestClient) SimilarColor(routeColor string, getSensitive *bool) (jsonResBody *SimilarTomates, err error) {
	sReqURL := "/similar/color/{color}"
	sReqURL = strings.Replace(sReqURL, "{color}", fmt.Sprintf("%v", routeColor), 1)
	reqURL, URLerr := url.ParseRequestURI(sReqURL)
	if URLerr != nil {
		return nil, errors.New("todo")
	}

	if getSensitive != nil {
		var xxgetSensitive string
		xxgetSensitive = "false"
		if getSensitive != nil && *getSensitive {
			xxgetSensitive = "true"
		}

		reqURL.Query().Add("sensitive", xxgetSensitive)
	}

	finalURL := reqURL.String()

	req, reqErr := http.NewRequest("GET", finalURL, nil)
	if reqErr != nil {
		return nil, errors.New("todo")
	}

	{
		res, resErr := t.client.Do(req)
		if resErr != nil {
			return nil, errors.New("todo")
		}

		decErr := json.NewDecoder(res.Body).Decode(jsonResBody)
		if decErr != nil {
			return nil, errors.New("todo")
		}

	}

	return jsonResBody, err
}

// Create constructs a request to /create
func (t RestClient) Create(postColor *string) (jsonResBody *Tomate, err error) {
	sReqURL := "/create"
	reqURL, URLerr := url.ParseRequestURI(sReqURL)
	if URLerr != nil {
		return nil, errors.New("todo")
	}
	form := url.Values{}
	form.Add("color", *postColor)

	finalURL := reqURL.String()

	req, reqErr := http.NewRequest("GET", finalURL, strings.NewReader(form.Encode()))
	if reqErr != nil {
		return nil, errors.New("todo")
	}

	{
		res, resErr := t.client.Do(req)
		if resErr != nil {
			return nil, errors.New("todo")
		}

		decErr := json.NewDecoder(res.Body).Decode(jsonResBody)
		if decErr != nil {
			return nil, errors.New("todo")
		}

	}

	return jsonResBody, err
}

// Update constructs a request to /write/{id:[0-9]+}
func (t RestClient) Update(routeID string, jsonReqBody *Tomate) (jsonResBody *Tomate, err error) {

	var body io.ReadWriter
	{
		var b bytes.Buffer
		body = &b
		encErr := json.NewEncoder(body).Encode(jsonReqBody)
		if encErr != nil {
			return nil, errors.New("todo")
		}

	}
	sReqURL := "/write/{id:[0-9]+}"
	sReqURL = strings.Replace(sReqURL, "{id:[0-9]+}", fmt.Sprintf("%v", routeID), 1)
	reqURL, URLerr := url.ParseRequestURI(sReqURL)
	if URLerr != nil {
		return nil, errors.New("todo")
	}
	finalURL := reqURL.String()

	req, reqErr := http.NewRequest("GET", finalURL, body)
	if reqErr != nil {
		return nil, errors.New("todo")
	}

	{
		res, resErr := t.client.Do(req)
		if resErr != nil {
			return nil, errors.New("todo")
		}

		decErr := json.NewDecoder(res.Body).Decode(jsonResBody)
		if decErr != nil {
			return nil, errors.New("todo")
		}

	}

	return jsonResBody, err
}

// Remove constructs a request to /remove/{id:[0-9]+}
func (t RestClient) Remove(ctx context.Context, routeID string) (jsonResBody bool, err error) {
	sReqURL := "/remove/{id:[0-9]+}"
	sReqURL = strings.Replace(sReqURL, "{id:[0-9]+}", fmt.Sprintf("%v", routeID), 1)
	reqURL, URLerr := url.ParseRequestURI(sReqURL)
	if URLerr != nil {
		return false, errors.New("todo")
	}
	finalURL := reqURL.String()

	req, reqErr := http.NewRequest("GET", finalURL, nil)
	if reqErr != nil {
		return false, errors.New("todo")
	}

	{
		res, resErr := t.client.Do(req)
		if resErr != nil {
			return false, errors.New("todo")
		}

		decErr := json.NewDecoder(res.Body).Decode(jsonResBody)
		if decErr != nil {
			return false, errors.New("todo")
		}

	}

	return jsonResBody, err
}
