package tomate

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"context"
	"encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xxe54b0b93f158f759b6dd1585bc54a7965806c533 = strconv.Atoi
var xx72debe57433968dd2f490b9bde2dee8c155e06bc = io.Copy
var xx0921489b227b5f67966848e3dde3a344935f476d = http.StatusOK

// RPCController is an httper of Controller.
// Controller of tomatoes.
type RPCController struct {
	embed    Controller
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRPCController constructs an httper of Controller
func NewRPCController(embed Controller) *RPCController {
	ret := &RPCController{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCController")
	return ret
}

// GetByID invoke Controller.GetByID using the request body as a json payload.
// GetByID read the Tomate of given ID
//
// @route /read/{id:[0-9]+}
func (t *RPCController) GetByID(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "GetByID")
	var routeID string
	{
		input := struct {
			routeID string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCController", "GetByID")
			t.embed.Finalizer(w, r, decErr)

			return
		}

		routeID = input.routeID
	}

	jsonResBody, err := t.embed.GetByID(routeID)
	output := struct {
		Arg0 *Tomate
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "GetByID")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "GetByID")

}

// SimilarColor invoke Controller.SimilarColor using the request body as a json payload.
// SimilarColor returns colors similar to the given input
//
// @route /similar/color/{color}
func (t *RPCController) SimilarColor(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "SimilarColor")
	var routeColor string
	var getSensitive *bool
	{
		input := struct {
			routeColor   string
			getSensitive *bool
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCController", "SimilarColor")
			t.embed.Finalizer(w, r, decErr)

			return
		}

		routeColor = input.routeColor
		getSensitive = input.getSensitive
	}

	jsonResBody, err := t.embed.SimilarColor(routeColor, getSensitive)
	output := struct {
		Arg0 *SimilarTomates
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "SimilarColor")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "SimilarColor")

}

// Create invoke Controller.Create using the request body as a json payload.
// Create a new Tomate
//
// @route /create
// @methods POST
func (t *RPCController) Create(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Create")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPCController", "Create")
			t.embed.Finalizer(w, r, err)

			return
		}

	}
	var postColor *string
	{
		input := struct {
			postColor *string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCController", "Create")
			t.embed.Finalizer(w, r, decErr)

			return
		}

		postColor = input.postColor
	}

	jsonResBody, err := t.embed.Create(postColor)
	output := struct {
		Arg0 *Tomate
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Create")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Create")

}

// Update invoke Controller.Update using the request body as a json payload.
// Update an existing Tomate
//
// @route /write/{id:[0-9]+}
// @methods POST
func (t *RPCController) Update(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Update")
	var routeID string
	var jsonReqBody *Tomate
	{
		input := struct {
			routeID     string
			jsonReqBody *Tomate
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCController", "Update")
			t.embed.Finalizer(w, r, decErr)

			return
		}

		routeID = input.routeID
		jsonReqBody = input.jsonReqBody
	}

	jsonResBody, err := t.embed.Update(routeID, jsonReqBody)
	output := struct {
		Arg0 *Tomate
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Update")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Update")

}

// Remove invoke Controller.Remove using the request body as a json payload.
// Remove an existing Tomate
//
// @route /remove/{id:[0-9]+}
// @methods POST
func (t *RPCController) Remove(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCController", "Remove")

	reqCtx := r.Context()
	ctx := reqCtx
	var routeID string
	{
		input := struct {
			routeID string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCController", "Remove")
			t.embed.Finalizer(w, r, decErr)

			return
		}

		routeID = input.routeID
	}

	jsonResBody, err := t.embed.Remove(ctx, routeID)
	output := struct {
		Arg0 bool
		Arg1 error
	}{
		Arg0: jsonResBody,
		Arg1: err,
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(output)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RPCController", "Remove")
			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RPCController", "Remove")

}

// RPCControllerDescriptor describe a *RPCController
type RPCControllerDescriptor struct {
	ggt.TypeDescriptor
	about              *RPCController
	methodGetByID      *ggt.MethodDescriptor
	methodSimilarColor *ggt.MethodDescriptor
	methodCreate       *ggt.MethodDescriptor
	methodUpdate       *ggt.MethodDescriptor
	methodRemove       *ggt.MethodDescriptor
}

// NewRPCControllerDescriptor describe a *RPCController
func NewRPCControllerDescriptor(about *RPCController) *RPCControllerDescriptor {
	ret := &RPCControllerDescriptor{about: about}
	ret.methodGetByID = &ggt.MethodDescriptor{
		Name:    "GetByID",
		Handler: about.GetByID,
		Route:   "/read/{id:[0-9]+}",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetByID)
	ret.methodSimilarColor = &ggt.MethodDescriptor{
		Name:    "SimilarColor",
		Handler: about.SimilarColor,
		Route:   "/similar/color/{color}",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodSimilarColor)
	ret.methodCreate = &ggt.MethodDescriptor{
		Name:    "Create",
		Handler: about.Create,
		Route:   "/create",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodCreate)
	ret.methodUpdate = &ggt.MethodDescriptor{
		Name:    "Update",
		Handler: about.Update,
		Route:   "/write/{id:[0-9]+}",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodUpdate)
	ret.methodRemove = &ggt.MethodDescriptor{
		Name:    "Remove",
		Handler: about.Remove,
		Route:   "/remove/{id:[0-9]+}",
		Methods: []string{"POST"},
	}
	ret.TypeDescriptor.Register(ret.methodRemove)
	return ret
}

// GetByID returns a MethodDescriptor
func (t *RPCControllerDescriptor) GetByID() *ggt.MethodDescriptor { return t.methodGetByID }

// SimilarColor returns a MethodDescriptor
func (t *RPCControllerDescriptor) SimilarColor() *ggt.MethodDescriptor { return t.methodSimilarColor }

// Create returns a MethodDescriptor
func (t *RPCControllerDescriptor) Create() *ggt.MethodDescriptor { return t.methodCreate }

// Update returns a MethodDescriptor
func (t *RPCControllerDescriptor) Update() *ggt.MethodDescriptor { return t.methodUpdate }

// Remove returns a MethodDescriptor
func (t *RPCControllerDescriptor) Remove() *ggt.MethodDescriptor { return t.methodRemove }
