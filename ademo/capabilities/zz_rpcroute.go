package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xx13751970453540515f0a8d0c51a507240ddecd56 = strconv.Atoi
var xx2743bd9627cf02ff8344f4b5bfbc9d9e022bf80e = io.Copy
var xx481e43390eea17d2be9267c3a6b7f018b078d86c = http.StatusOK

// RPCRoute is an httper of Route.
// Route ...
type RPCRoute struct {
	embed    Route
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRPCRoute constructs an httper of Route
func NewRPCRoute(embed Route) *RPCRoute {
	ret := &RPCRoute{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCRoute")
	return ret
}

// GetAll invoke Route.GetAll using the request body as a json payload.
// GetAll values from the route.
func (t *RPCRoute) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "GetAll")
	var routeValues map[string]string
	{
		input := struct {
			routeValues map[string]string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "GetAll")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeValues = input.routeValues
	}

	t.embed.GetAll(routeValues)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "GetAll")

}

// GetOne invoke Route.GetOne using the request body as a json payload.
// GetOne value from the route.
func (t *RPCRoute) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "GetOne")
	var routeArg1 string
	{
		input := struct {
			routeArg1 string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "GetOne")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeArg1 = input.routeArg1
	}

	t.embed.GetOne(routeArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "GetOne")

}

// GetMany invoke Route.GetMany using the request body as a json payload.
// GetMany values from the route.
func (t *RPCRoute) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "GetMany")
	var routeArg1 string
	var routeArg2 string
	{
		input := struct {
			routeArg1 string
			routeArg2 string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "GetMany")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeArg1 = input.routeArg1
		routeArg2 = input.routeArg2
	}

	t.embed.GetMany(routeArg1, routeArg2)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "GetMany")

}

// ConvertToInt invoke Route.ConvertToInt using the request body as a json payload.
// ConvertToInt an arg from the route.
func (t *RPCRoute) ConvertToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "ConvertToInt")
	var routeArg1 int
	{
		input := struct {
			routeArg1 int
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "ConvertToInt")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeArg1 = input.routeArg1
	}

	t.embed.ConvertToInt(routeArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "ConvertToInt")

}

// ConvertToBool invoke Route.ConvertToBool using the request body as a json payload.
// ConvertToBool an arg from the route.
func (t *RPCRoute) ConvertToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "ConvertToBool")
	var routeArg1 bool
	{
		input := struct {
			routeArg1 bool
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "ConvertToBool")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeArg1 = input.routeArg1
	}

	t.embed.ConvertToBool(routeArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "ConvertToBool")

}

// MaybeGet invoke Route.MaybeGet using the request body as a json payload.
// MaybeGet an arg from the route if it exists.
func (t *RPCRoute) MaybeGet(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCRoute", "MaybeGet")
	var routeArg1 *string
	{
		input := struct {
			routeArg1 *string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPCRoute", "MaybeGet")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		routeArg1 = input.routeArg1
	}

	t.embed.MaybeGet(routeArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCRoute", "MaybeGet")

}

// RPCRouteDescriptor describe a *RPCRoute
type RPCRouteDescriptor struct {
	ggt.TypeDescriptor
	about               *RPCRoute
	methodGetAll        *ggt.MethodDescriptor
	methodGetOne        *ggt.MethodDescriptor
	methodGetMany       *ggt.MethodDescriptor
	methodConvertToInt  *ggt.MethodDescriptor
	methodConvertToBool *ggt.MethodDescriptor
	methodMaybeGet      *ggt.MethodDescriptor
}

// NewRPCRouteDescriptor describe a *RPCRoute
func NewRPCRouteDescriptor(about *RPCRoute) *RPCRouteDescriptor {
	ret := &RPCRouteDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodConvertToInt = &ggt.MethodDescriptor{
		Name:    "ConvertToInt",
		Handler: about.ConvertToInt,
		Route:   "ConvertToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToInt)
	ret.methodConvertToBool = &ggt.MethodDescriptor{
		Name:    "ConvertToBool",
		Handler: about.ConvertToBool,
		Route:   "ConvertToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToBool)
	ret.methodMaybeGet = &ggt.MethodDescriptor{
		Name:    "MaybeGet",
		Handler: about.MaybeGet,
		Route:   "MaybeGet",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGet)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RPCRouteDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetOne returns a MethodDescriptor
func (t *RPCRouteDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RPCRouteDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// ConvertToInt returns a MethodDescriptor
func (t *RPCRouteDescriptor) ConvertToInt() *ggt.MethodDescriptor { return t.methodConvertToInt }

// ConvertToBool returns a MethodDescriptor
func (t *RPCRouteDescriptor) ConvertToBool() *ggt.MethodDescriptor { return t.methodConvertToBool }

// MaybeGet returns a MethodDescriptor
func (t *RPCRouteDescriptor) MaybeGet() *ggt.MethodDescriptor { return t.methodMaybeGet }
