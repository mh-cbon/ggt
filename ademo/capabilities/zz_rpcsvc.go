package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xxf4c5b59bb654f48ba1fc05ed15803cf46b056834 = strconv.Atoi
var xx499059ee908c7dce060b54f35ac4ca2bad342897 = io.Copy
var xxc0d87ac9a526f41b8ab7716924b2c493b3a3be4e = http.StatusOK

// RPCSvc is an httper of Svc.
// Svc ...
type RPCSvc struct {
	embed    Svc
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRPCSvc constructs an httper of Svc
func NewRPCSvc(embed Svc) *RPCSvc {
	ret := &RPCSvc{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCSvc")
	return ret
}

// Get invoke Svc.Get using the request body as a json payload.
// Get the services provider
// @route get
func (t *RPCSvc) Get(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCSvc", "Get")

	var provider finder.ServiceFinder
	provider = t.Services

	t.embed.Get(provider)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCSvc", "Get")

}

// GetOne invoke Svc.GetOne using the request body as a json payload.
// GetOne service
// @route getone
func (t *RPCSvc) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCSvc", "GetOne")
	var svcMail WhateverMailService

	if t.Services.Get(svcMail) == false {
		t.Log.Handle(w, r, nil, "service", "notfound", "mail", "RPCSvc", "GetOne")
	}

	t.embed.GetOne(svcMail)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPCSvc", "GetOne")

}

// RPCSvcDescriptor describe a *RPCSvc
type RPCSvcDescriptor struct {
	ggt.TypeDescriptor
	about        *RPCSvc
	methodGet    *ggt.MethodDescriptor
	methodGetOne *ggt.MethodDescriptor
}

// NewRPCSvcDescriptor describe a *RPCSvc
func NewRPCSvcDescriptor(about *RPCSvc) *RPCSvcDescriptor {
	ret := &RPCSvcDescriptor{about: about}
	ret.methodGet = &ggt.MethodDescriptor{
		Name:    "Get",
		Handler: about.Get,
		Route:   "get",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGet)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "getone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	return ret
}

// Get returns a MethodDescriptor
func (t *RPCSvcDescriptor) Get() *ggt.MethodDescriptor { return t.methodGet }

// GetOne returns a MethodDescriptor
func (t *RPCSvcDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }
