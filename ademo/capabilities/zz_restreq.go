package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"github.com/gorilla/mux"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxa93bea9b3161bdd94ae3d137e63b0a8681e9e7a7 = strconv.Atoi
var xx34995c941601fa6fe9e9e2281bb739c5ca3c4b98 = io.Copy
var xxafd96cb0b6a582f43bb5bb685964cbe68c65a47a = http.StatusOK

// RestReq is an httper of Req.
// Req is a merge of route, url, form
type RestReq struct {
	embed   Req
	Log     ggt.HTTPLogger
	Session ggt.SessionStoreProvider
}

// NewRestReq constructs an httper of Req
func NewRestReq(embed Req) *RestReq {
	ret := &RestReq{
		embed:   embed,
		Log:     &ggt.VoidLog{},
		Session: &ggt.VoidSession{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestReq")
	return ret
}

// GetAll invoke Req.GetAll using the request body as a json payload.
// GetAll return a merged map of route, url, form
func (t *RestReq) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "GetAll")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "GetAll")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()

	var reqValues map[string][]string
	{
		reqValues = map[string][]string{}
		xxTempValue := reqValues
		for k, v := range xxRouteVars {
			if _, ok := xxTempValue[k]; ok {
				xxTempValue[k] = append(xxTempValue[k], v)
			} else {
				xxTempValue[k] = []string{v}
			}
		}
		for k, v := range xxURLValues {
			if _, ok := xxTempValue[k]; ok {
				xxTempValue[k] = append(xxTempValue[k], v...)
			} else {
				xxTempValue[k] = v
			}
		}
		for k, v := range r.Form {
			if _, ok := xxTempValue[k]; ok {
				xxTempValue[k] = append(xxTempValue[k], v...)
			} else {
				xxTempValue[k] = v
			}
		}
	}

	t.embed.GetAll(reqValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "GetAll")
}

// GetAll2 invoke Req.GetAll2 using the request body as a json payload.
// GetAll2 return a merged map of route, url, form
func (t *RestReq) GetAll2(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "GetAll2")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "GetAll2")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()

	var reqValues map[string]string
	{
		reqValues = map[string]string{}
		xxTempValue := reqValues
		for k, v := range xxRouteVars {
			if len(v) > 0 {
				xxTempValue[k] = v
			}
		}
		for k, v := range xxURLValues {
			if len(v) > 0 {
				if _, ok := xxTempValue[k]; ok {
					for _, vv := range v {
						if len(vv) > 0 {
							xxTempValue[k] = vv
							break
						}
					}
				} else {
					for _, vv := range v {
						if len(vv) > 0 {
							xxTempValue[k] = vv
							break
						}
					}
				}
			}
		}
		for k, v := range r.Form {
			if len(v) > 0 {
				if _, ok := xxTempValue[k]; ok {
					for _, vv := range v {
						if len(vv) > 0 {
							xxTempValue[k] = vv
							break
						}
					}
				} else {
					for _, vv := range v {
						if len(vv) > 0 {
							xxTempValue[k] = vv
							break
						}
					}
				}
			}
		}
	}

	t.embed.GetAll2(reqValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "GetAll2")
}

// GetOne invoke Req.GetOne using the request body as a json payload.
// GetOne return the first value in route, url, form
func (t *RestReq) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "GetOne")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "GetOne")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var reqArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpreqArg1 := xxRouteVars["arg1"]
		reqArg1 = xxTmpreqArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpreqArg1 := xxURLValues.Get("arg1")
		reqArg1 = xxTmpreqArg1
	} else if _, ok := r.Form["arg1"]; ok {
		xxTmpreqArg1 := r.FormValue("arg1")
		reqArg1 = xxTmpreqArg1
	}

	t.embed.GetOne(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "GetOne")
}

// GetMany invoke Req.GetMany using the request body as a json payload.
// GetMany return the first value of each parameter in route, url, form
func (t *RestReq) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "GetMany")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "GetMany")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var reqArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpreqArg1 := xxRouteVars["arg1"]
		reqArg1 = xxTmpreqArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpreqArg1 := xxURLValues.Get("arg1")
		reqArg1 = xxTmpreqArg1
	} else if _, ok := r.Form["arg1"]; ok {
		xxTmpreqArg1 := r.FormValue("arg1")
		reqArg1 = xxTmpreqArg1
	}
	var reqArg2 string
	if _, ok := xxRouteVars["arg2"]; ok {
		xxTmpreqArg2 := xxRouteVars["arg2"]
		reqArg2 = xxTmpreqArg2
	} else if _, ok := xxURLValues["arg2"]; ok {
		xxTmpreqArg2 := xxURLValues.Get("arg2")
		reqArg2 = xxTmpreqArg2
	} else if _, ok := r.Form["arg2"]; ok {
		xxTmpreqArg2 := r.FormValue("arg2")
		reqArg2 = xxTmpreqArg2
	}

	t.embed.GetMany(reqArg1, reqArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "GetMany")
}

// ConvertToInt invoke Req.ConvertToInt using the request body as a json payload.
// ConvertToInt an arg
func (t *RestReq) ConvertToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "ConvertToInt")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "ConvertToInt")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var reqArg1 int
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpreqArg1 := xxRouteVars["arg1"]
		{
			var err error
			reqArg1, err = strconv.Atoi(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "route", "error", "RestReq", "ConvertToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpreqArg1 := xxURLValues.Get("arg1")
		{
			var err error
			reqArg1, err = strconv.Atoi(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "get", "error", "RestReq", "ConvertToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := r.Form["arg1"]; ok {
		xxTmpreqArg1 := r.FormValue("arg1")
		{
			var err error
			reqArg1, err = strconv.Atoi(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "form", "error", "RestReq", "ConvertToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.ConvertToInt(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "ConvertToInt")
}

// ConvertToBool invoke Req.ConvertToBool using the request body as a json payload.
// ConvertToBool an arg
func (t *RestReq) ConvertToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "ConvertToBool")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "ConvertToBool")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var reqArg1 bool
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpreqArg1 := xxRouteVars["arg1"]
		{
			var err error
			reqArg1, err = strconv.ParseBool(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "route", "error", "RestReq", "ConvertToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpreqArg1 := xxURLValues.Get("arg1")
		{
			var err error
			reqArg1, err = strconv.ParseBool(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "get", "error", "RestReq", "ConvertToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := r.Form["arg1"]; ok {
		xxTmpreqArg1 := r.FormValue("arg1")
		{
			var err error
			reqArg1, err = strconv.ParseBool(xxTmpreqArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "form", "error", "RestReq", "ConvertToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.ConvertToBool(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "ConvertToBool")
}

// MaybeGet invoke Req.MaybeGet using the request body as a json payload.
// MaybeGet an arg if it exists.
func (t *RestReq) MaybeGet(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestReq", "MaybeGet")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestReq", "MaybeGet")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var reqArg1 *string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpreqArg1 := xxRouteVars["arg1"]
		reqArg1 = &xxTmpreqArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpreqArg1 := xxURLValues.Get("arg1")
		reqArg1 = &xxTmpreqArg1
	} else if _, ok := r.Form["arg1"]; ok {
		xxTmpreqArg1 := r.FormValue("arg1")
		reqArg1 = &xxTmpreqArg1
	}

	t.embed.MaybeGet(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestReq", "MaybeGet")
}

// RestReqDescriptor describe a *RestReq
type RestReqDescriptor struct {
	ggt.TypeDescriptor
	about               *RestReq
	methodGetAll        *ggt.MethodDescriptor
	methodGetAll2       *ggt.MethodDescriptor
	methodGetOne        *ggt.MethodDescriptor
	methodGetMany       *ggt.MethodDescriptor
	methodConvertToInt  *ggt.MethodDescriptor
	methodConvertToBool *ggt.MethodDescriptor
	methodMaybeGet      *ggt.MethodDescriptor
}

// NewRestReqDescriptor describe a *RestReq
func NewRestReqDescriptor(about *RestReq) *RestReqDescriptor {
	ret := &RestReqDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetAll2 = &ggt.MethodDescriptor{
		Name:    "GetAll2",
		Handler: about.GetAll2,
		Route:   "GetAll2",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll2)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodConvertToInt = &ggt.MethodDescriptor{
		Name:    "ConvertToInt",
		Handler: about.ConvertToInt,
		Route:   "ConvertToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToInt)
	ret.methodConvertToBool = &ggt.MethodDescriptor{
		Name:    "ConvertToBool",
		Handler: about.ConvertToBool,
		Route:   "ConvertToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToBool)
	ret.methodMaybeGet = &ggt.MethodDescriptor{
		Name:    "MaybeGet",
		Handler: about.MaybeGet,
		Route:   "MaybeGet",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGet)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RestReqDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetAll2 returns a MethodDescriptor
func (t *RestReqDescriptor) GetAll2() *ggt.MethodDescriptor { return t.methodGetAll2 }

// GetOne returns a MethodDescriptor
func (t *RestReqDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RestReqDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// ConvertToInt returns a MethodDescriptor
func (t *RestReqDescriptor) ConvertToInt() *ggt.MethodDescriptor { return t.methodConvertToInt }

// ConvertToBool returns a MethodDescriptor
func (t *RestReqDescriptor) ConvertToBool() *ggt.MethodDescriptor { return t.methodConvertToBool }

// MaybeGet returns a MethodDescriptor
func (t *RestReqDescriptor) MaybeGet() *ggt.MethodDescriptor { return t.methodMaybeGet }
