package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx42418c411ac2839d4d2eee750d69139e01e0761a = strconv.Atoi
var xx12dce26e25d6b948f172bedee7ed6f3ff4fd3f88 = io.Copy
var xx043baa2f2638ea5b3c11ecda5a07b342bec9450a = http.StatusOK

// RPCSession is an httper of Session.
// Session provide access to the session
type RPCSession struct {
	embed   Session
	Log     ggt.HTTPLogger
	Session ggt.SessionStoreProvider
}

// NewRPCSession constructs an httper of Session
func NewRPCSession(embed Session) *RPCSession {
	ret := &RPCSession{
		embed:   embed,
		Log:     &ggt.VoidLog{},
		Session: &ggt.VoidSession{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCSession")
	return ret
}

// GetAll invoke Session.GetAll using the request body as a json payload.
// GetAll return a map
func (t *RPCSession) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCSession", "GetAll")
	input := struct {
		Arg0 map[interface{}]interface{}
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCSession", "GetAll")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetAll(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCSession", "GetAll")
}

// RPCSessionDescriptor describe a *RPCSession
type RPCSessionDescriptor struct {
	ggt.TypeDescriptor
	about        *RPCSession
	methodGetAll *ggt.MethodDescriptor
}

// NewRPCSessionDescriptor describe a *RPCSession
func NewRPCSessionDescriptor(about *RPCSession) *RPCSessionDescriptor {
	ret := &RPCSessionDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RPCSessionDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }
