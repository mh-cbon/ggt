package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"github.com/gorilla/mux"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx823f5739cf58207161931f728cb2e032f268ab42 = strconv.Atoi
var xxbba276dee07f896b516db08fd667bef01088e0ad = io.Copy
var xx253de98ee8936f17e74b80de8934125614595420 = http.StatusOK

// RestURL is an httper of URL.
// URL ...
type RestURL struct {
	embed URL
	Log   ggt.HTTPLogger
}

// NewRestURL constructs an httper of URL
func NewRestURL(embed URL) *RestURL {
	ret := &RestURL{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestURL")
	return ret
}

// GetOne invoke URL.GetOne using the request body as a json payload.
// GetOne ...
func (t *RestURL) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestURL", "GetOne")

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var urlArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpurlArg1 := xxRouteVars["arg1"]
		urlArg1 = xxTmpurlArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpurlArg1 := xxURLValues.Get("arg1")
		urlArg1 = xxTmpurlArg1
	}

	t.embed.GetOne(urlArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestURL", "GetOne")
}

// GetMany invoke URL.GetMany using the request body as a json payload.
// GetMany ...
func (t *RestURL) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestURL", "GetMany")

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var urlArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpurlArg1 := xxRouteVars["arg1"]
		urlArg1 = xxTmpurlArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpurlArg1 := xxURLValues.Get("arg1")
		urlArg1 = xxTmpurlArg1
	}
	var urlArg2 string
	if _, ok := xxRouteVars["arg2"]; ok {
		xxTmpurlArg2 := xxRouteVars["arg2"]
		urlArg2 = xxTmpurlArg2
	} else if _, ok := xxURLValues["arg2"]; ok {
		xxTmpurlArg2 := xxURLValues.Get("arg2")
		urlArg2 = xxTmpurlArg2
	}

	t.embed.GetMany(urlArg1, urlArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestURL", "GetMany")
}

// GetConvertedToInt invoke URL.GetConvertedToInt using the request body as a json payload.
// GetConvertedToInt ...
func (t *RestURL) GetConvertedToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestURL", "GetConvertedToInt")

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var urlArg1 int
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpurlArg1 := xxRouteVars["arg1"]
		{
			var err error
			urlArg1, err = strconv.Atoi(xxTmpurlArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "url", "route", "error", "RestURL", "GetConvertedToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpurlArg1 := xxURLValues.Get("arg1")
		{
			var err error
			urlArg1, err = strconv.Atoi(xxTmpurlArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "url", "get", "error", "RestURL", "GetConvertedToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToInt(urlArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestURL", "GetConvertedToInt")
}

// GetConvertedToBool invoke URL.GetConvertedToBool using the request body as a json payload.
// GetConvertedToBool ...
func (t *RestURL) GetConvertedToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestURL", "GetConvertedToBool")

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var urlArg1 bool
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpurlArg1 := xxRouteVars["arg1"]
		{
			var err error
			urlArg1, err = strconv.ParseBool(xxTmpurlArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "url", "route", "error", "RestURL", "GetConvertedToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpurlArg1 := xxURLValues.Get("arg1")
		{
			var err error
			urlArg1, err = strconv.ParseBool(xxTmpurlArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "url", "get", "error", "RestURL", "GetConvertedToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToBool(urlArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestURL", "GetConvertedToBool")
}

// GetMaybe invoke URL.GetMaybe using the request body as a json payload.
// GetMaybe ...
func (t *RestURL) GetMaybe(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestURL", "GetMaybe")

	xxRouteVars := mux.Vars(r)

	xxURLValues := r.URL.Query()
	var urlArg1 *string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmpurlArg1 := xxRouteVars["arg1"]
		urlArg1 = &xxTmpurlArg1
	} else if _, ok := xxURLValues["arg1"]; ok {
		xxTmpurlArg1 := xxURLValues.Get("arg1")
		urlArg1 = &xxTmpurlArg1
	}

	t.embed.GetMaybe(urlArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestURL", "GetMaybe")
}

// RestURLDescriptor describe a *RestURL
type RestURLDescriptor struct {
	ggt.TypeDescriptor
	about                    *RestURL
	methodGetOne             *ggt.MethodDescriptor
	methodGetMany            *ggt.MethodDescriptor
	methodGetConvertedToInt  *ggt.MethodDescriptor
	methodGetConvertedToBool *ggt.MethodDescriptor
	methodGetMaybe           *ggt.MethodDescriptor
}

// NewRestURLDescriptor describe a *RestURL
func NewRestURLDescriptor(about *RestURL) *RestURLDescriptor {
	ret := &RestURLDescriptor{about: about}
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodGetConvertedToInt = &ggt.MethodDescriptor{
		Name:    "GetConvertedToInt",
		Handler: about.GetConvertedToInt,
		Route:   "GetConvertedToInt",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToInt)
	ret.methodGetConvertedToBool = &ggt.MethodDescriptor{
		Name:    "GetConvertedToBool",
		Handler: about.GetConvertedToBool,
		Route:   "GetConvertedToBool",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToBool)
	ret.methodGetMaybe = &ggt.MethodDescriptor{
		Name:    "GetMaybe",
		Handler: about.GetMaybe,
		Route:   "GetMaybe",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMaybe)
	return ret
}

// GetOne returns a MethodDescriptor
func (t *RestURLDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RestURLDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// GetConvertedToInt returns a MethodDescriptor
func (t *RestURLDescriptor) GetConvertedToInt() *ggt.MethodDescriptor {
	return t.methodGetConvertedToInt
}

// GetConvertedToBool returns a MethodDescriptor
func (t *RestURLDescriptor) GetConvertedToBool() *ggt.MethodDescriptor {
	return t.methodGetConvertedToBool
}

// GetMaybe returns a MethodDescriptor
func (t *RestURLDescriptor) GetMaybe() *ggt.MethodDescriptor { return t.methodGetMaybe }
