package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx9bc7e1bc2fd6b79119c03c5a052e63bfd46edb4a = strconv.Atoi
var xx8d58e1927ff460fd30b306099786ee1604bab586 = io.Copy
var xx3352309dc29aed32c4e6fd341cb3fe5cf192a78c = http.StatusOK

// RestJSON is an httper of JSON.
// JSON ...
type RestJSON struct {
	embed   JSON
	Log     ggt.HTTPLogger
	Session ggt.SessionStoreProvider
	Upload  ggt.Uploader
}

// NewRestJSON constructs an httper of JSON
func NewRestJSON(embed JSON) *RestJSON {
	ret := &RestJSON{
		embed:   embed,
		Log:     &ggt.VoidLog{},
		Session: &ggt.VoidSession{},
		Upload:  &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestJSON")
	return ret
}

// ReadJSONBody invoke JSON.ReadJSONBody using the request body as a json payload.
// ReadJSONBody ...
func (t *RestJSON) ReadJSONBody(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestJSON", "ReadJSONBody")
	var jsonReqBody Whatever
	{
		jsonReqBody = Whatever{}
		decErr := json.NewDecoder(r.Body).Decode(jsonReqBody)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RestJSON", "ReadJSONBody")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		defer r.Body.Close()
	}

	t.embed.ReadJSONBody(jsonReqBody)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestJSON", "ReadJSONBody")
}

// WriteJSONBody invoke JSON.WriteJSONBody using the request body as a json payload.
// WriteJSONBody ...
func (t *RestJSON) WriteJSONBody(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestJSON", "WriteJSONBody")

	jsonResBody := t.embed.WriteJSONBody()

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "RestJSON", "WriteJSONBody")
			http.Error(w, encErr.Error(), http.StatusInternalServerError)

			return
		}

	}

	t.Log.Handle(w, r, nil, "end", "RestJSON", "WriteJSONBody")
}

// RestJSONDescriptor describe a *RestJSON
type RestJSONDescriptor struct {
	ggt.TypeDescriptor
	about               *RestJSON
	methodReadJSONBody  *ggt.MethodDescriptor
	methodWriteJSONBody *ggt.MethodDescriptor
}

// NewRestJSONDescriptor describe a *RestJSON
func NewRestJSONDescriptor(about *RestJSON) *RestJSONDescriptor {
	ret := &RestJSONDescriptor{about: about}
	ret.methodReadJSONBody = &ggt.MethodDescriptor{
		Name:    "ReadJSONBody",
		Handler: about.ReadJSONBody,
		Route:   "ReadJSONBody",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodReadJSONBody)
	ret.methodWriteJSONBody = &ggt.MethodDescriptor{
		Name:    "WriteJSONBody",
		Handler: about.WriteJSONBody,
		Route:   "WriteJSONBody",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodWriteJSONBody)
	return ret
}

// ReadJSONBody returns a MethodDescriptor
func (t *RestJSONDescriptor) ReadJSONBody() *ggt.MethodDescriptor { return t.methodReadJSONBody }

// WriteJSONBody returns a MethodDescriptor
func (t *RestJSONDescriptor) WriteJSONBody() *ggt.MethodDescriptor { return t.methodWriteJSONBody }
