package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxc1d3217a127b45a61c6463147e028264747166c7 = strconv.Atoi
var xx852b6e11b7f0f2f3552afc8fa28e4a7ce8ebbbb8 = io.Copy
var xx182b08c3e322e698beff04017c453e2bc56bc601 = http.StatusOK

// RPReq is an httper of Req.
// Req is a merge of route, url, form
type RPReq struct {
	embed   Req
	Log     ggt.HTTPLogger
	Session ggt.SessionStoreProvider
	Upload  ggt.Uploader
}

// NewRPReq constructs an httper of Req
func NewRPReq(embed Req) *RPReq {
	ret := &RPReq{
		embed:   embed,
		Log:     &ggt.VoidLog{},
		Session: &ggt.VoidSession{},
		Upload:  &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPReq")
	return ret
}

// GetAll invoke Req.GetAll using the request body as a json payload.
// GetAll return a merged map of route, url, form
func (t *RPReq) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetAll")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetAll")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqValues map[string][]string
	{
		input := struct {
			reqValues map[string][]string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "GetAll")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqValues = input.reqValues
	}

	t.embed.GetAll(reqValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetAll")
}

// GetAll2 invoke Req.GetAll2 using the request body as a json payload.
// GetAll2 return a merged map of route, url, form
func (t *RPReq) GetAll2(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetAll2")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetAll2")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqValues map[string]string
	{
		input := struct {
			reqValues map[string]string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "GetAll2")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqValues = input.reqValues
	}

	t.embed.GetAll2(reqValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetAll2")
}

// GetOne invoke Req.GetOne using the request body as a json payload.
// GetOne return the first value in route, url, form
func (t *RPReq) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetOne")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetOne")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqArg1 string
	{
		input := struct {
			reqArg1 string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "GetOne")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqArg1 = input.reqArg1
	}

	t.embed.GetOne(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetOne")
}

// GetMany invoke Req.GetMany using the request body as a json payload.
// GetMany return the first value of each parameter in route, url, form
func (t *RPReq) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetMany")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetMany")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqArg1 string
	var reqArg2 string
	{
		input := struct {
			reqArg1 string
			reqArg2 string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "GetMany")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqArg1 = input.reqArg1
		reqArg2 = input.reqArg2
	}

	t.embed.GetMany(reqArg1, reqArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetMany")
}

// ConvertToInt invoke Req.ConvertToInt using the request body as a json payload.
// ConvertToInt an arg
func (t *RPReq) ConvertToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "ConvertToInt")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "ConvertToInt")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqArg1 int
	{
		input := struct {
			reqArg1 int
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "ConvertToInt")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqArg1 = input.reqArg1
	}

	t.embed.ConvertToInt(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "ConvertToInt")
}

// ConvertToBool invoke Req.ConvertToBool using the request body as a json payload.
// ConvertToBool an arg
func (t *RPReq) ConvertToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "ConvertToBool")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "ConvertToBool")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqArg1 bool
	{
		input := struct {
			reqArg1 bool
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "ConvertToBool")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqArg1 = input.reqArg1
	}

	t.embed.ConvertToBool(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "ConvertToBool")
}

// MaybeGet invoke Req.MaybeGet using the request body as a json payload.
// MaybeGet an arg if it exists.
func (t *RPReq) MaybeGet(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "MaybeGet")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "MaybeGet")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var reqArg1 *string
	{
		input := struct {
			reqArg1 *string
		}{}
		decErr := json.NewDecoder(r.Body).Decode(&input)

		if decErr != nil {

			t.Log.Handle(w, r, decErr, "json", "decode", "input", "error", "RPReq", "MaybeGet")
			http.Error(w, decErr.Error(), http.StatusInternalServerError)

			return
		}

		reqArg1 = input.reqArg1
	}

	t.embed.MaybeGet(reqArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RPReq", "MaybeGet")
}

// RPReqDescriptor describe a *RPReq
type RPReqDescriptor struct {
	ggt.TypeDescriptor
	about               *RPReq
	methodGetAll        *ggt.MethodDescriptor
	methodGetAll2       *ggt.MethodDescriptor
	methodGetOne        *ggt.MethodDescriptor
	methodGetMany       *ggt.MethodDescriptor
	methodConvertToInt  *ggt.MethodDescriptor
	methodConvertToBool *ggt.MethodDescriptor
	methodMaybeGet      *ggt.MethodDescriptor
}

// NewRPReqDescriptor describe a *RPReq
func NewRPReqDescriptor(about *RPReq) *RPReqDescriptor {
	ret := &RPReqDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetAll2 = &ggt.MethodDescriptor{
		Name:    "GetAll2",
		Handler: about.GetAll2,
		Route:   "GetAll2",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll2)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodConvertToInt = &ggt.MethodDescriptor{
		Name:    "ConvertToInt",
		Handler: about.ConvertToInt,
		Route:   "ConvertToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToInt)
	ret.methodConvertToBool = &ggt.MethodDescriptor{
		Name:    "ConvertToBool",
		Handler: about.ConvertToBool,
		Route:   "ConvertToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToBool)
	ret.methodMaybeGet = &ggt.MethodDescriptor{
		Name:    "MaybeGet",
		Handler: about.MaybeGet,
		Route:   "MaybeGet",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGet)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RPReqDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetAll2 returns a MethodDescriptor
func (t *RPReqDescriptor) GetAll2() *ggt.MethodDescriptor { return t.methodGetAll2 }

// GetOne returns a MethodDescriptor
func (t *RPReqDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RPReqDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// ConvertToInt returns a MethodDescriptor
func (t *RPReqDescriptor) ConvertToInt() *ggt.MethodDescriptor { return t.methodConvertToInt }

// ConvertToBool returns a MethodDescriptor
func (t *RPReqDescriptor) ConvertToBool() *ggt.MethodDescriptor { return t.methodConvertToBool }

// MaybeGet returns a MethodDescriptor
func (t *RPReqDescriptor) MaybeGet() *ggt.MethodDescriptor { return t.methodMaybeGet }
