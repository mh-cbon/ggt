package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxc1d3217a127b45a61c6463147e028264747166c7 = strconv.Atoi
var xx852b6e11b7f0f2f3552afc8fa28e4a7ce8ebbbb8 = io.Copy
var xx182b08c3e322e698beff04017c453e2bc56bc601 = http.StatusOK

// RPReq is an httper of Req.
// Req ...
type RPReq struct {
	embed Req
	Log   ggt.HTTPLogger
}

// NewRPReq constructs an httper of Req
func NewRPReq(embed Req) *RPReq {
	ret := &RPReq{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPReq")
	return ret
}

// GetAll invoke Req.GetAll using the request body as a json payload.
// GetAll ...
func (t *RPReq) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetAll")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetAll")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 map[string][]string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetAll")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetAll(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetAll")
}

// GetAll2 invoke Req.GetAll2 using the request body as a json payload.
// GetAll2 ...
func (t *RPReq) GetAll2(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetAll2")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetAll2")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 map[string]string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetAll2")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetAll2(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetAll2")
}

// GetOne invoke Req.GetOne using the request body as a json payload.
// GetOne ...
func (t *RPReq) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetOne")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetOne")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetOne")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetOne(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetOne")
}

// GetMany invoke Req.GetMany using the request body as a json payload.
// GetMany ...
func (t *RPReq) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetMany")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetMany")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 string
		Arg1 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetMany")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetMany(input.Arg0, input.Arg1)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetMany")
}

// GetConvertedToInt invoke Req.GetConvertedToInt using the request body as a json payload.
// GetConvertedToInt ...
func (t *RPReq) GetConvertedToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetConvertedToInt")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetConvertedToInt")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 int
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetConvertedToInt")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetConvertedToInt(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetConvertedToInt")
}

// GetConvertedToBool invoke Req.GetConvertedToBool using the request body as a json payload.
// GetConvertedToBool ...
func (t *RPReq) GetConvertedToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetConvertedToBool")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetConvertedToBool")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 bool
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetConvertedToBool")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetConvertedToBool(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetConvertedToBool")
}

// GetMaybe invoke Req.GetMaybe using the request body as a json payload.
// GetMaybe ...
func (t *RPReq) GetMaybe(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPReq", "GetMaybe")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RPReq", "GetMaybe")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	input := struct {
		Arg0 *string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPReq", "GetMaybe")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetMaybe(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPReq", "GetMaybe")
}

// RPReqDescriptor describe a *RPReq
type RPReqDescriptor struct {
	ggt.TypeDescriptor
	about                    *RPReq
	methodGetAll             *ggt.MethodDescriptor
	methodGetAll2            *ggt.MethodDescriptor
	methodGetOne             *ggt.MethodDescriptor
	methodGetMany            *ggt.MethodDescriptor
	methodGetConvertedToInt  *ggt.MethodDescriptor
	methodGetConvertedToBool *ggt.MethodDescriptor
	methodGetMaybe           *ggt.MethodDescriptor
}

// NewRPReqDescriptor describe a *RPReq
func NewRPReqDescriptor(about *RPReq) *RPReqDescriptor {
	ret := &RPReqDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetAll2 = &ggt.MethodDescriptor{
		Name:    "GetAll2",
		Handler: about.GetAll2,
		Route:   "GetAll2",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll2)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodGetConvertedToInt = &ggt.MethodDescriptor{
		Name:    "GetConvertedToInt",
		Handler: about.GetConvertedToInt,
		Route:   "GetConvertedToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToInt)
	ret.methodGetConvertedToBool = &ggt.MethodDescriptor{
		Name:    "GetConvertedToBool",
		Handler: about.GetConvertedToBool,
		Route:   "GetConvertedToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToBool)
	ret.methodGetMaybe = &ggt.MethodDescriptor{
		Name:    "GetMaybe",
		Handler: about.GetMaybe,
		Route:   "GetMaybe",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMaybe)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RPReqDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetAll2 returns a MethodDescriptor
func (t *RPReqDescriptor) GetAll2() *ggt.MethodDescriptor { return t.methodGetAll2 }

// GetOne returns a MethodDescriptor
func (t *RPReqDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RPReqDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// GetConvertedToInt returns a MethodDescriptor
func (t *RPReqDescriptor) GetConvertedToInt() *ggt.MethodDescriptor { return t.methodGetConvertedToInt }

// GetConvertedToBool returns a MethodDescriptor
func (t *RPReqDescriptor) GetConvertedToBool() *ggt.MethodDescriptor {
	return t.methodGetConvertedToBool
}

// GetMaybe returns a MethodDescriptor
func (t *RPReqDescriptor) GetMaybe() *ggt.MethodDescriptor { return t.methodGetMaybe }
