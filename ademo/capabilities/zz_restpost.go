package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxdbf56f743bf596f54da5648790c11f5fd8e42ce5 = strconv.Atoi
var xx3ccd00de86714d7854bde739b1c57273c7c09a2b = io.Copy
var xxa9084b1cb52bccaf3c147589a64c8e13b2211509 = http.StatusOK

// RestPost is an httper of Post.
// Post ...
type RestPost struct {
	embed Post
	Log   ggt.HTTPLogger
}

// NewRestPost constructs an httper of Post
func NewRestPost(embed Post) *RestPost {
	ret := &RestPost{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestPost")
	return ret
}

// GetOne invoke Post.GetOne using the request body as a json payload.
// GetOne ...
func (t *RestPost) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetOne")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetOne")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetOne")
		postArg1 = xxTmppostArg1
	}

	t.embed.GetOne(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetOne")
}

// GetMany invoke Post.GetMany using the request body as a json payload.
// GetMany ...
func (t *RestPost) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetMany")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetMany")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetMany")
		postArg1 = xxTmppostArg1
	}
	var postArg2 string
	if _, ok := r.Form["arg2"]; ok {
		xxTmppostArg2 := r.FormValue("arg2")
		t.Log.Handle(w, r, nil, "input", "form", "arg2", xxTmppostArg2, "RestPost", "GetMany")
		postArg2 = xxTmppostArg2
	}

	t.embed.GetMany(postArg1, postArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetMany")
}

// GetConvertedToInt invoke Post.GetConvertedToInt using the request body as a json payload.
// GetConvertedToInt ...
func (t *RestPost) GetConvertedToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetConvertedToInt")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetConvertedToInt")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 int
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetConvertedToInt")
		{
			var err error
			postArg1, err = strconv.Atoi(xxTmppostArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "post", "error", "RestPost", "GetConvertedToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToInt(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetConvertedToInt")
}

// GetConvertedToBool invoke Post.GetConvertedToBool using the request body as a json payload.
// GetConvertedToBool ...
func (t *RestPost) GetConvertedToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetConvertedToBool")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetConvertedToBool")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 bool
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetConvertedToBool")
		{
			var err error
			postArg1, err = strconv.ParseBool(xxTmppostArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "post", "error", "RestPost", "GetConvertedToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToBool(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetConvertedToBool")
}

// GetConvertedToSlice invoke Post.GetConvertedToSlice using the request body as a json payload.
// GetConvertedToSlice ...
func (t *RestPost) GetConvertedToSlice(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetConvertedToSlice")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetConvertedToSlice")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 []bool
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.Form["arg1"]
		t.Log.Handle(w, r, nil, "input", "form", "arg1", "RestPost", "GetConvertedToSlice")

		for _, xxValueTemp := range xxTmppostArg1 {
			var xxNewValueTemp bool
			{
				var err error
				xxNewValueTemp, err = strconv.ParseBool(xxValueTemp)

				if err != nil {

					t.Log.Handle(w, r, err, "error", "RestPost", "GetConvertedToSlice")
					http.Error(w, err.Error(), http.StatusInternalServerError)

					return
				}

			}

			postArg1 = append(postArg1, xxNewValueTemp)
		}

	}

	t.embed.GetConvertedToSlice(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetConvertedToSlice")
}

// GetMaybe invoke Post.GetMaybe using the request body as a json payload.
// GetMaybe ...
func (t *RestPost) GetMaybe(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetMaybe")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetMaybe")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 *string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetMaybe")
		postArg1 = &xxTmppostArg1
	}

	t.embed.GetMaybe(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetMaybe")
}

// RestPostDescriptor describe a *RestPost
type RestPostDescriptor struct {
	ggt.TypeDescriptor
	about                     *RestPost
	methodGetOne              *ggt.MethodDescriptor
	methodGetMany             *ggt.MethodDescriptor
	methodGetConvertedToInt   *ggt.MethodDescriptor
	methodGetConvertedToBool  *ggt.MethodDescriptor
	methodGetConvertedToSlice *ggt.MethodDescriptor
	methodGetMaybe            *ggt.MethodDescriptor
}

// NewRestPostDescriptor describe a *RestPost
func NewRestPostDescriptor(about *RestPost) *RestPostDescriptor {
	ret := &RestPostDescriptor{about: about}
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodGetConvertedToInt = &ggt.MethodDescriptor{
		Name:    "GetConvertedToInt",
		Handler: about.GetConvertedToInt,
		Route:   "GetConvertedToInt",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToInt)
	ret.methodGetConvertedToBool = &ggt.MethodDescriptor{
		Name:    "GetConvertedToBool",
		Handler: about.GetConvertedToBool,
		Route:   "GetConvertedToBool",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToBool)
	ret.methodGetConvertedToSlice = &ggt.MethodDescriptor{
		Name:    "GetConvertedToSlice",
		Handler: about.GetConvertedToSlice,
		Route:   "GetConvertedToSlice",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToSlice)
	ret.methodGetMaybe = &ggt.MethodDescriptor{
		Name:    "GetMaybe",
		Handler: about.GetMaybe,
		Route:   "GetMaybe",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMaybe)
	return ret
}

// GetOne returns a MethodDescriptor
func (t *RestPostDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RestPostDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// GetConvertedToInt returns a MethodDescriptor
func (t *RestPostDescriptor) GetConvertedToInt() *ggt.MethodDescriptor {
	return t.methodGetConvertedToInt
}

// GetConvertedToBool returns a MethodDescriptor
func (t *RestPostDescriptor) GetConvertedToBool() *ggt.MethodDescriptor {
	return t.methodGetConvertedToBool
}

// GetConvertedToSlice returns a MethodDescriptor
func (t *RestPostDescriptor) GetConvertedToSlice() *ggt.MethodDescriptor {
	return t.methodGetConvertedToSlice
}

// GetMaybe returns a MethodDescriptor
func (t *RestPostDescriptor) GetMaybe() *ggt.MethodDescriptor { return t.methodGetMaybe }
