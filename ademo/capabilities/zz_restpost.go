package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xxdbf56f743bf596f54da5648790c11f5fd8e42ce5 = strconv.Atoi
var xx3ccd00de86714d7854bde739b1c57273c7c09a2b = io.Copy
var xxa9084b1cb52bccaf3c147589a64c8e13b2211509 = http.StatusOK

// RestPost is an httper of Post.
// Post ...
type RestPost struct {
	embed    Post
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRestPost constructs an httper of Post
func NewRestPost(embed Post) *RestPost {
	ret := &RestPost{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestPost")
	return ret
}

// GetAll invoke Post.GetAll using the request body as a json payload.
// GetAll values from the form.
func (t *RestPost) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetAll")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetAll")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	postValues := r.PostForm

	t.embed.GetAll(postValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetAll")
}

// GetAll2 invoke Post.GetAll2 using the request body as a json payload.
// GetAll2 values from the form.
func (t *RestPost) GetAll2(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetAll2")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetAll2")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	postValues := map[string]string{}
	{
		for k, v := range r.PostForm {
			if len(v) > 0 {
				postValues[k] = v[0]
			}
		}
	}

	t.embed.GetAll2(postValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetAll2")
}

// GetOne invoke Post.GetOne using the request body as a json payload.
// GetOne arg form the form.
func (t *RestPost) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetOne")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetOne")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetOne")
		postArg1 = xxTmppostArg1
	}

	t.embed.GetOne(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetOne")
}

// GetMany invoke Post.GetMany using the request body as a json payload.
// GetMany args form the form.
func (t *RestPost) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "GetMany")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "GetMany")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "GetMany")
		postArg1 = xxTmppostArg1
	}
	var postArg2 string
	if _, ok := r.Form["arg2"]; ok {
		xxTmppostArg2 := r.FormValue("arg2")
		t.Log.Handle(w, r, nil, "input", "form", "arg2", xxTmppostArg2, "RestPost", "GetMany")
		postArg2 = xxTmppostArg2
	}

	t.embed.GetMany(postArg1, postArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "GetMany")
}

// ConvertToInt invoke Post.ConvertToInt using the request body as a json payload.
// ConvertToInt an arg from the form.
func (t *RestPost) ConvertToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "ConvertToInt")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "ConvertToInt")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 int
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "ConvertToInt")
		{
			var err error
			postArg1, err = strconv.Atoi(xxTmppostArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "post", "error", "RestPost", "ConvertToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.ConvertToInt(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "ConvertToInt")
}

// ConvertToBool invoke Post.ConvertToBool using the request body as a json payload.
// ConvertToBool an arg from the form.
func (t *RestPost) ConvertToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "ConvertToBool")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "ConvertToBool")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 bool
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "ConvertToBool")
		{
			var err error
			postArg1, err = strconv.ParseBool(xxTmppostArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "post", "error", "RestPost", "ConvertToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.ConvertToBool(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "ConvertToBool")
}

// ConvertToSlice invoke Post.ConvertToSlice using the request body as a json payload.
// ConvertToSlice an arg from the form.
func (t *RestPost) ConvertToSlice(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "ConvertToSlice")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "ConvertToSlice")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 []bool
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.Form["arg1"]
		t.Log.Handle(w, r, nil, "input", "form", "arg1", "RestPost", "ConvertToSlice")

		for _, xxValueTemp := range xxTmppostArg1 {
			var xxNewValueTemp bool
			{
				var err error
				xxNewValueTemp, err = strconv.ParseBool(xxValueTemp)

				if err != nil {

					t.Log.Handle(w, r, err, "error", "RestPost", "ConvertToSlice")
					http.Error(w, err.Error(), http.StatusInternalServerError)

					return
				}

			}

			postArg1 = append(postArg1, xxNewValueTemp)
		}

	}

	t.embed.ConvertToSlice(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "ConvertToSlice")
}

// MaybeGet invoke Post.MaybeGet using the request body as a json payload.
// MaybeGet an arg if it exists in the form.
func (t *RestPost) MaybeGet(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestPost", "MaybeGet")

	{
		err := r.ParseForm()

		if err != nil {

			t.Log.Handle(w, r, err, "parseform", "error", "RestPost", "MaybeGet")
			http.Error(w, err.Error(), http.StatusInternalServerError)

			return
		}

	}
	var postArg1 *string
	if _, ok := r.Form["arg1"]; ok {
		xxTmppostArg1 := r.FormValue("arg1")
		t.Log.Handle(w, r, nil, "input", "form", "arg1", xxTmppostArg1, "RestPost", "MaybeGet")
		postArg1 = &xxTmppostArg1
	}

	t.embed.MaybeGet(postArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestPost", "MaybeGet")
}

// RestPostDescriptor describe a *RestPost
type RestPostDescriptor struct {
	ggt.TypeDescriptor
	about                *RestPost
	methodGetAll         *ggt.MethodDescriptor
	methodGetAll2        *ggt.MethodDescriptor
	methodGetOne         *ggt.MethodDescriptor
	methodGetMany        *ggt.MethodDescriptor
	methodConvertToInt   *ggt.MethodDescriptor
	methodConvertToBool  *ggt.MethodDescriptor
	methodConvertToSlice *ggt.MethodDescriptor
	methodMaybeGet       *ggt.MethodDescriptor
}

// NewRestPostDescriptor describe a *RestPost
func NewRestPostDescriptor(about *RestPost) *RestPostDescriptor {
	ret := &RestPostDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetAll2 = &ggt.MethodDescriptor{
		Name:    "GetAll2",
		Handler: about.GetAll2,
		Route:   "GetAll2",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll2)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodConvertToInt = &ggt.MethodDescriptor{
		Name:    "ConvertToInt",
		Handler: about.ConvertToInt,
		Route:   "ConvertToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToInt)
	ret.methodConvertToBool = &ggt.MethodDescriptor{
		Name:    "ConvertToBool",
		Handler: about.ConvertToBool,
		Route:   "ConvertToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToBool)
	ret.methodConvertToSlice = &ggt.MethodDescriptor{
		Name:    "ConvertToSlice",
		Handler: about.ConvertToSlice,
		Route:   "ConvertToSlice",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToSlice)
	ret.methodMaybeGet = &ggt.MethodDescriptor{
		Name:    "MaybeGet",
		Handler: about.MaybeGet,
		Route:   "MaybeGet",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGet)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RestPostDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetAll2 returns a MethodDescriptor
func (t *RestPostDescriptor) GetAll2() *ggt.MethodDescriptor { return t.methodGetAll2 }

// GetOne returns a MethodDescriptor
func (t *RestPostDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RestPostDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// ConvertToInt returns a MethodDescriptor
func (t *RestPostDescriptor) ConvertToInt() *ggt.MethodDescriptor { return t.methodConvertToInt }

// ConvertToBool returns a MethodDescriptor
func (t *RestPostDescriptor) ConvertToBool() *ggt.MethodDescriptor { return t.methodConvertToBool }

// ConvertToSlice returns a MethodDescriptor
func (t *RestPostDescriptor) ConvertToSlice() *ggt.MethodDescriptor { return t.methodConvertToSlice }

// MaybeGet returns a MethodDescriptor
func (t *RestPostDescriptor) MaybeGet() *ggt.MethodDescriptor { return t.methodMaybeGet }
