package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xx91e4692085c66d295c9373e4bc34e7d664411b19 = strconv.Atoi
var xx6d1c6d5a94da91eaade435005185dfabe2c7f5da = io.Copy
var xx14312dca4a40b19493650761c3831ae3c970ebec = http.StatusOK

// MwMediator is an httper of Mediator.
// Mediator so called middleware
type MwMediator struct {
	embed    Mediator
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewMwMediator constructs an httper of Mediator
func NewMwMediator(embed Mediator) *MwMediator {
	ret := &MwMediator{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "MwMediator")
	return ret
}

// AddSomeHeader wraps Mediator.AddSomeHeader.
// AddSomeHeader ...
func (t *MwMediator) AddSomeHeader(handler func(w http.ResponseWriter, r *http.Request)) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		t.Log.Handle(w, r, nil, "begin", "MwMediator", "AddSomeHeader")

		t.embed.AddSomeHeader(handler, w, r)

		t.Log.Handle(w, r, nil, "end", "MwMediator", "AddSomeHeader")

	}
}

// WriteResponse wraps Mediator.WriteResponse.
// WriteResponse ...
func (t *MwMediator) WriteResponse(handler func(w http.ResponseWriter, r *http.Request)) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		t.Log.Handle(w, r, nil, "begin", "MwMediator", "WriteResponse")

		jsonResBody := t.embed.WriteResponse()

		{
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(200)
			encErr := json.NewEncoder(w).Encode(jsonResBody)

			if encErr != nil {

				t.Log.Handle(w, r, encErr, "res", "json", "encode", "error", "MwMediator", "WriteResponse")
				http.Error(w, encErr.Error(), http.StatusInternalServerError)

				return
			}

		}

		t.Log.Handle(w, r, nil, "end", "MwMediator", "WriteResponse")

	}
}
