package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xx6f378a2c4c701e8b8ba4fde4fe216c47a8ea8e1a = strconv.Atoi
var xx4973aa47925a8af97a2b41cc16a13e23ace183ac = io.Copy
var xx44071aab653fbd3d58eede288e09d63ec4115d8c = http.StatusOK

// RestSvc is an httper of Svc.
// Svc ...
type RestSvc struct {
	embed    Svc
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRestSvc constructs an httper of Svc
func NewRestSvc(embed Svc) *RestSvc {
	ret := &RestSvc{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestSvc")
	return ret
}

// Get invoke Svc.Get using the request body as a json payload.
// Get the services provider
// @route get
func (t *RestSvc) Get(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestSvc", "Get")

	var provider finder.ServiceFinder
	provider = t.Services

	t.embed.Get(provider)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestSvc", "Get")
}

// GetOne invoke Svc.GetOne using the request body as a json payload.
// GetOne service
// @route getone
func (t *RestSvc) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestSvc", "GetOne")
	var svcMail WhateverMailService

	if t.Services.Get(svcMail) == false {
		t.Log.Handle(w, r, nil, "service", "notfound", "mail", "RestSvc", "GetOne")
	}

	t.embed.GetOne(svcMail)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestSvc", "GetOne")
}

// RestSvcDescriptor describe a *RestSvc
type RestSvcDescriptor struct {
	ggt.TypeDescriptor
	about        *RestSvc
	methodGet    *ggt.MethodDescriptor
	methodGetOne *ggt.MethodDescriptor
}

// NewRestSvcDescriptor describe a *RestSvc
func NewRestSvcDescriptor(about *RestSvc) *RestSvcDescriptor {
	ret := &RestSvcDescriptor{about: about}
	ret.methodGet = &ggt.MethodDescriptor{
		Name:    "Get",
		Handler: about.Get,
		Route:   "get",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGet)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "getone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	return ret
}

// Get returns a MethodDescriptor
func (t *RestSvcDescriptor) Get() *ggt.MethodDescriptor { return t.methodGet }

// GetOne returns a MethodDescriptor
func (t *RestSvcDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }
