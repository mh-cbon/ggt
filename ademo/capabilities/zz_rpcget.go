package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx00efeff0137224a29086975b39336ddf1e2c440c = strconv.Atoi
var xx224500d9eb17144ee9d18b56f0a36cefebe8fce0 = io.Copy
var xx80436437e20876c92d63a3643d16330ada7afaea = http.StatusOK

// RPCGet is an httper of Get.
// Get ...
type RPCGet struct {
	embed Get
	Log   ggt.HTTPLogger
}

// NewRPCGet constructs an httper of Get
func NewRPCGet(embed Get) *RPCGet {
	ret := &RPCGet{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCGet")
	return ret
}

// GetOne invoke Get.GetOne using the request body as a json payload.
// GetOne ...
func (t *RPCGet) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetOne")
	input := struct {
		Arg0 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetOne")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetOne(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetOne")
}

// GetMany invoke Get.GetMany using the request body as a json payload.
// GetMany ...
func (t *RPCGet) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetMany")
	input := struct {
		Arg0 string
		Arg1 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetMany")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetMany(input.Arg0, input.Arg1)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetMany")
}

// GetConvertedToInt invoke Get.GetConvertedToInt using the request body as a json payload.
// GetConvertedToInt ...
func (t *RPCGet) GetConvertedToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetConvertedToInt")
	input := struct {
		Arg0 int
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetConvertedToInt")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetConvertedToInt(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetConvertedToInt")
}

// GetConvertedToBool invoke Get.GetConvertedToBool using the request body as a json payload.
// GetConvertedToBool ...
func (t *RPCGet) GetConvertedToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetConvertedToBool")
	input := struct {
		Arg0 bool
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetConvertedToBool")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetConvertedToBool(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetConvertedToBool")
}

// GetConvertedToSlice invoke Get.GetConvertedToSlice using the request body as a json payload.
// GetConvertedToSlice ...
func (t *RPCGet) GetConvertedToSlice(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetConvertedToSlice")
	input := struct {
		Arg0 []bool
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetConvertedToSlice")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetConvertedToSlice(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetConvertedToSlice")
}

// GetMaybe invoke Get.GetMaybe using the request body as a json payload.
// GetMaybe ...
func (t *RPCGet) GetMaybe(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetMaybe")
	input := struct {
		Arg0 *string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetMaybe")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetMaybe(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetMaybe")
}

// RPCGetDescriptor describe a *RPCGet
type RPCGetDescriptor struct {
	ggt.TypeDescriptor
	about                     *RPCGet
	methodGetOne              *ggt.MethodDescriptor
	methodGetMany             *ggt.MethodDescriptor
	methodGetConvertedToInt   *ggt.MethodDescriptor
	methodGetConvertedToBool  *ggt.MethodDescriptor
	methodGetConvertedToSlice *ggt.MethodDescriptor
	methodGetMaybe            *ggt.MethodDescriptor
}

// NewRPCGetDescriptor describe a *RPCGet
func NewRPCGetDescriptor(about *RPCGet) *RPCGetDescriptor {
	ret := &RPCGetDescriptor{about: about}
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodGetConvertedToInt = &ggt.MethodDescriptor{
		Name:    "GetConvertedToInt",
		Handler: about.GetConvertedToInt,
		Route:   "GetConvertedToInt",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToInt)
	ret.methodGetConvertedToBool = &ggt.MethodDescriptor{
		Name:    "GetConvertedToBool",
		Handler: about.GetConvertedToBool,
		Route:   "GetConvertedToBool",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToBool)
	ret.methodGetConvertedToSlice = &ggt.MethodDescriptor{
		Name:    "GetConvertedToSlice",
		Handler: about.GetConvertedToSlice,
		Route:   "GetConvertedToSlice",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToSlice)
	ret.methodGetMaybe = &ggt.MethodDescriptor{
		Name:    "GetMaybe",
		Handler: about.GetMaybe,
		Route:   "GetMaybe",
		Methods: []string{"GET"},
	}
	ret.TypeDescriptor.Register(ret.methodGetMaybe)
	return ret
}

// GetOne returns a MethodDescriptor
func (t *RPCGetDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RPCGetDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// GetConvertedToInt returns a MethodDescriptor
func (t *RPCGetDescriptor) GetConvertedToInt() *ggt.MethodDescriptor { return t.methodGetConvertedToInt }

// GetConvertedToBool returns a MethodDescriptor
func (t *RPCGetDescriptor) GetConvertedToBool() *ggt.MethodDescriptor {
	return t.methodGetConvertedToBool
}

// GetConvertedToSlice returns a MethodDescriptor
func (t *RPCGetDescriptor) GetConvertedToSlice() *ggt.MethodDescriptor {
	return t.methodGetConvertedToSlice
}

// GetMaybe returns a MethodDescriptor
func (t *RPCGetDescriptor) GetMaybe() *ggt.MethodDescriptor { return t.methodGetMaybe }
