package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx00efeff0137224a29086975b39336ddf1e2c440c = strconv.Atoi
var xx224500d9eb17144ee9d18b56f0a36cefebe8fce0 = io.Copy
var xx80436437e20876c92d63a3643d16330ada7afaea = http.StatusOK

// RPCGet is an httper of Get.
// Get ...
type RPCGet struct {
	embed   Get
	Log     ggt.HTTPLogger
	Session ggt.SessionStoreProvider
}

// NewRPCGet constructs an httper of Get
func NewRPCGet(embed Get) *RPCGet {
	ret := &RPCGet{
		embed:   embed,
		Log:     &ggt.VoidLog{},
		Session: &ggt.VoidSession{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RPCGet")
	return ret
}

// GetAll invoke Get.GetAll using the request body as a json payload.
// GetAll values in url query as a map of values
func (t *RPCGet) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetAll")
	input := struct {
		Arg0 map[string][]string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetAll")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetAll(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetAll")
}

// GetAll2 invoke Get.GetAll2 using the request body as a json payload.
// GetAll2 values in url query as a map of value
func (t *RPCGet) GetAll2(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetAll2")
	input := struct {
		Arg0 map[string]string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetAll2")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetAll2(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetAll2")
}

// GetOne invoke Get.GetOne using the request body as a json payload.
// GetOne arg from url query
func (t *RPCGet) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetOne")
	input := struct {
		Arg0 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetOne")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetOne(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetOne")
}

// GetMany invoke Get.GetMany using the request body as a json payload.
// GetMany args from url query
func (t *RPCGet) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "GetMany")
	input := struct {
		Arg0 string
		Arg1 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "GetMany")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.GetMany(input.Arg0, input.Arg1)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "GetMany")
}

// ConvertToInt invoke Get.ConvertToInt using the request body as a json payload.
// ConvertToInt an arg from url query
func (t *RPCGet) ConvertToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "ConvertToInt")
	input := struct {
		Arg0 int
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "ConvertToInt")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.ConvertToInt(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "ConvertToInt")
}

// ConvertToBool invoke Get.ConvertToBool using the request body as a json payload.
// ConvertToBool an arg from url query
func (t *RPCGet) ConvertToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "ConvertToBool")
	input := struct {
		Arg0 bool
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "ConvertToBool")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.ConvertToBool(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "ConvertToBool")
}

// ConvertToSlice invoke Get.ConvertToSlice using the request body as a json payload.
// ConvertToSlice an arg from url query
func (t *RPCGet) ConvertToSlice(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "ConvertToSlice")
	input := struct {
		Arg0 []bool
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "ConvertToSlice")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.ConvertToSlice(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "ConvertToSlice")
}

// MaybeGet invoke Get.MaybeGet using the request body as a json payload.
// MaybeGet an arg if it exists in url query.
func (t *RPCGet) MaybeGet(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RPCGet", "MaybeGet")
	input := struct {
		Arg0 *string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)

	if decErr != nil {

		t.Log.Handle(w, r, decErr, "req", "json", "decode", "error", "RPCGet", "MaybeGet")
		http.Error(w, decErr.Error(), http.StatusInternalServerError)

		return
	}

	t.embed.MaybeGet(input.Arg0)

	t.Log.Handle(w, r, nil, "end", "RPCGet", "MaybeGet")
}

// RPCGetDescriptor describe a *RPCGet
type RPCGetDescriptor struct {
	ggt.TypeDescriptor
	about                *RPCGet
	methodGetAll         *ggt.MethodDescriptor
	methodGetAll2        *ggt.MethodDescriptor
	methodGetOne         *ggt.MethodDescriptor
	methodGetMany        *ggt.MethodDescriptor
	methodConvertToInt   *ggt.MethodDescriptor
	methodConvertToBool  *ggt.MethodDescriptor
	methodConvertToSlice *ggt.MethodDescriptor
	methodMaybeGet       *ggt.MethodDescriptor
}

// NewRPCGetDescriptor describe a *RPCGet
func NewRPCGetDescriptor(about *RPCGet) *RPCGetDescriptor {
	ret := &RPCGetDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetAll2 = &ggt.MethodDescriptor{
		Name:    "GetAll2",
		Handler: about.GetAll2,
		Route:   "GetAll2",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll2)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodConvertToInt = &ggt.MethodDescriptor{
		Name:    "ConvertToInt",
		Handler: about.ConvertToInt,
		Route:   "ConvertToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToInt)
	ret.methodConvertToBool = &ggt.MethodDescriptor{
		Name:    "ConvertToBool",
		Handler: about.ConvertToBool,
		Route:   "ConvertToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToBool)
	ret.methodConvertToSlice = &ggt.MethodDescriptor{
		Name:    "ConvertToSlice",
		Handler: about.ConvertToSlice,
		Route:   "ConvertToSlice",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodConvertToSlice)
	ret.methodMaybeGet = &ggt.MethodDescriptor{
		Name:    "MaybeGet",
		Handler: about.MaybeGet,
		Route:   "MaybeGet",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGet)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RPCGetDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetAll2 returns a MethodDescriptor
func (t *RPCGetDescriptor) GetAll2() *ggt.MethodDescriptor { return t.methodGetAll2 }

// GetOne returns a MethodDescriptor
func (t *RPCGetDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RPCGetDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// ConvertToInt returns a MethodDescriptor
func (t *RPCGetDescriptor) ConvertToInt() *ggt.MethodDescriptor { return t.methodConvertToInt }

// ConvertToBool returns a MethodDescriptor
func (t *RPCGetDescriptor) ConvertToBool() *ggt.MethodDescriptor { return t.methodConvertToBool }

// ConvertToSlice returns a MethodDescriptor
func (t *RPCGetDescriptor) ConvertToSlice() *ggt.MethodDescriptor { return t.methodConvertToSlice }

// MaybeGet returns a MethodDescriptor
func (t *RPCGetDescriptor) MaybeGet() *ggt.MethodDescriptor { return t.methodMaybeGet }
