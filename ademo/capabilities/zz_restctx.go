package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"context"
	ggt "github.com/mh-cbon/ggt/lib"
	finder "github.com/mh-cbon/service-finder"
	"io"
	"net/http"
	"strconv"
)

var xx974f985fdc82474ac72ad3d02cf7a33aa217bbf9 = strconv.Atoi
var xx4d82bfcd2b0d214301f9ec683afb3168942660db = io.Copy
var xx341cf762d0a5efd4195c541373af30a983b4f7a2 = http.StatusOK

// RestCtx is an httper of Ctx.
// Ctx ...
type RestCtx struct {
	embed    Ctx
	Services finder.ServiceFinder
	Log      ggt.HTTPLogger
	Session  ggt.SessionStoreProvider
	Upload   ggt.Uploader
}

// NewRestCtx constructs an httper of Ctx
func NewRestCtx(embed Ctx) *RestCtx {
	ret := &RestCtx{
		embed:    embed,
		Services: finder.New(),
		Log:      &ggt.VoidLog{},
		Session:  &ggt.VoidSession{},
		Upload:   &ggt.FileProvider{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestCtx")
	return ret
}

// Get invoke Ctx.Get using the request body as a json payload.
// Get the context
// @route get
func (t *RestCtx) Get(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestCtx", "Get")

	reqCtx := r.Context()
	whatever := reqCtx

	t.embed.Get(whatever)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestCtx", "Get")

}

// GetOne invoke Ctx.GetOne using the request body as a json payload.
// GetOne arg from context.
// @route getone
func (t *RestCtx) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestCtx", "GetOne")

	reqCtx := r.Context()
	var ctxArg1 Whatever
	{
		ctxVal := reqCtx.Value("ggt.arg1")
		if ctxVal != nil {
			if x, ok := ctxVal.(Whatever); ok {
				ctxArg1 = x
			}
		}
	}

	t.embed.GetOne(ctxArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestCtx", "GetOne")

}

// MaybeGetOne invoke Ctx.MaybeGetOne using the request body as a json payload.
// MaybeGetOne arg from the context
// @route maybegetone
func (t *RestCtx) MaybeGetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestCtx", "MaybeGetOne")

	reqCtx := r.Context()
	var ctxArg1 *Whatever
	{
		ctxVal := reqCtx.Value("ggt.arg1")
		if ctxVal != nil {
			if x, ok := ctxVal.(*Whatever); ok {
				ctxArg1 = x
			}
		}
	}

	t.embed.MaybeGetOne(ctxArg1)

	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestCtx", "MaybeGetOne")

}

// SetOne invoke Ctx.SetOne using the request body as a json payload.
// SetOne arg on the context.
// @route setone
func (t *RestCtx) SetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestCtx", "SetOne")

	reqCtx := r.Context()

	ctxArg1 := t.embed.SetOne()
	reqCtx = context.WithValue(reqCtx, "ggt.arg1", ctxArg1)

	r = r.WithContext(reqCtx)

	t.Log.Handle(w, r, nil, "end", "RestCtx", "SetOne")

}

// MaybeSetOne invoke Ctx.MaybeSetOne using the request body as a json payload.
// MaybeSetOne arg on the context
// @route maybesetone
func (t *RestCtx) MaybeSetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestCtx", "MaybeSetOne")

	reqCtx := r.Context()

	ctxArg1 := t.embed.MaybeSetOne()
	reqCtx = context.WithValue(reqCtx, "ggt.arg1", ctxArg1)

	r = r.WithContext(reqCtx)

	t.Log.Handle(w, r, nil, "end", "RestCtx", "MaybeSetOne")

}

// RestCtxDescriptor describe a *RestCtx
type RestCtxDescriptor struct {
	ggt.TypeDescriptor
	about             *RestCtx
	methodGet         *ggt.MethodDescriptor
	methodGetOne      *ggt.MethodDescriptor
	methodMaybeGetOne *ggt.MethodDescriptor
	methodSetOne      *ggt.MethodDescriptor
	methodMaybeSetOne *ggt.MethodDescriptor
}

// NewRestCtxDescriptor describe a *RestCtx
func NewRestCtxDescriptor(about *RestCtx) *RestCtxDescriptor {
	ret := &RestCtxDescriptor{about: about}
	ret.methodGet = &ggt.MethodDescriptor{
		Name:    "Get",
		Handler: about.Get,
		Route:   "get",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGet)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "getone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodMaybeGetOne = &ggt.MethodDescriptor{
		Name:    "MaybeGetOne",
		Handler: about.MaybeGetOne,
		Route:   "maybegetone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeGetOne)
	ret.methodSetOne = &ggt.MethodDescriptor{
		Name:    "SetOne",
		Handler: about.SetOne,
		Route:   "setone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodSetOne)
	ret.methodMaybeSetOne = &ggt.MethodDescriptor{
		Name:    "MaybeSetOne",
		Handler: about.MaybeSetOne,
		Route:   "maybesetone",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodMaybeSetOne)
	return ret
}

// Get returns a MethodDescriptor
func (t *RestCtxDescriptor) Get() *ggt.MethodDescriptor { return t.methodGet }

// GetOne returns a MethodDescriptor
func (t *RestCtxDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// MaybeGetOne returns a MethodDescriptor
func (t *RestCtxDescriptor) MaybeGetOne() *ggt.MethodDescriptor { return t.methodMaybeGetOne }

// SetOne returns a MethodDescriptor
func (t *RestCtxDescriptor) SetOne() *ggt.MethodDescriptor { return t.methodSetOne }

// MaybeSetOne returns a MethodDescriptor
func (t *RestCtxDescriptor) MaybeSetOne() *ggt.MethodDescriptor { return t.methodMaybeSetOne }
