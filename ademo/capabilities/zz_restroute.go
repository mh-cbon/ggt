package capable

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	"github.com/gorilla/mux"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xx11d993c04acefa26da5321978096985c2062b454 = strconv.Atoi
var xx93a4423d46d788cc56aa3f0ffe947e7fc608756f = io.Copy
var xxb47dda5b25301614e990ea2bc6deb11aaab869c4 = http.StatusOK

// RestRoute is an httper of Route.
// Route ...
type RestRoute struct {
	embed Route
	Log   ggt.HTTPLogger
}

// NewRestRoute constructs an httper of Route
func NewRestRoute(embed Route) *RestRoute {
	ret := &RestRoute{
		embed: embed,
		Log:   &ggt.VoidLog{},
	}
	ret.Log.Handle(nil, nil, nil, "constructor", "RestRoute")
	return ret
}

// GetAll invoke Route.GetAll using the request body as a json payload.
// GetAll ...
func (t *RestRoute) GetAll(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetAll")

	xxRouteVars := mux.Vars(r)
	routeValues := xxRouteVars

	t.embed.GetAll(routeValues)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetAll")
}

// GetOne invoke Route.GetOne using the request body as a json payload.
// GetOne ...
func (t *RestRoute) GetOne(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetOne")

	xxRouteVars := mux.Vars(r)
	var routeArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmprouteArg1 := xxRouteVars["arg1"]
		t.Log.Handle(w, r, nil, "input", "route", "arg1", xxTmprouteArg1, "RestRoute", "GetOne")
		routeArg1 = xxTmprouteArg1
	}

	t.embed.GetOne(routeArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetOne")
}

// GetMany invoke Route.GetMany using the request body as a json payload.
// GetMany ...
func (t *RestRoute) GetMany(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetMany")

	xxRouteVars := mux.Vars(r)
	var routeArg1 string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmprouteArg1 := xxRouteVars["arg1"]
		t.Log.Handle(w, r, nil, "input", "route", "arg1", xxTmprouteArg1, "RestRoute", "GetMany")
		routeArg1 = xxTmprouteArg1
	}
	var routeArg2 string
	if _, ok := xxRouteVars["arg2"]; ok {
		xxTmprouteArg2 := xxRouteVars["arg2"]
		t.Log.Handle(w, r, nil, "input", "route", "arg2", xxTmprouteArg2, "RestRoute", "GetMany")
		routeArg2 = xxTmprouteArg2
	}

	t.embed.GetMany(routeArg1, routeArg2)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetMany")
}

// GetConvertedToInt invoke Route.GetConvertedToInt using the request body as a json payload.
// GetConvertedToInt ...
func (t *RestRoute) GetConvertedToInt(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetConvertedToInt")

	xxRouteVars := mux.Vars(r)
	var routeArg1 int
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmprouteArg1 := xxRouteVars["arg1"]
		t.Log.Handle(w, r, nil, "input", "route", "arg1", xxTmprouteArg1, "RestRoute", "GetConvertedToInt")
		{
			var err error
			routeArg1, err = strconv.Atoi(xxTmprouteArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "route", "error", "RestRoute", "GetConvertedToInt")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToInt(routeArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetConvertedToInt")
}

// GetConvertedToBool invoke Route.GetConvertedToBool using the request body as a json payload.
// GetConvertedToBool ...
func (t *RestRoute) GetConvertedToBool(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetConvertedToBool")

	xxRouteVars := mux.Vars(r)
	var routeArg1 bool
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmprouteArg1 := xxRouteVars["arg1"]
		t.Log.Handle(w, r, nil, "input", "route", "arg1", xxTmprouteArg1, "RestRoute", "GetConvertedToBool")
		{
			var err error
			routeArg1, err = strconv.ParseBool(xxTmprouteArg1)

			if err != nil {

				t.Log.Handle(w, r, err, "route", "error", "RestRoute", "GetConvertedToBool")
				http.Error(w, err.Error(), http.StatusInternalServerError)

				return
			}

		}

	}

	t.embed.GetConvertedToBool(routeArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetConvertedToBool")
}

// GetMaybe invoke Route.GetMaybe using the request body as a json payload.
// GetMaybe ...
func (t *RestRoute) GetMaybe(w http.ResponseWriter, r *http.Request) {
	t.Log.Handle(w, r, nil, "begin", "RestRoute", "GetMaybe")

	xxRouteVars := mux.Vars(r)
	var routeArg1 *string
	if _, ok := xxRouteVars["arg1"]; ok {
		xxTmprouteArg1 := xxRouteVars["arg1"]
		t.Log.Handle(w, r, nil, "input", "route", "arg1", xxTmprouteArg1, "RestRoute", "GetMaybe")
		routeArg1 = &xxTmprouteArg1
	}

	t.embed.GetMaybe(routeArg1)
	w.WriteHeader(200)

	t.Log.Handle(w, r, nil, "end", "RestRoute", "GetMaybe")
}

// RestRouteDescriptor describe a *RestRoute
type RestRouteDescriptor struct {
	ggt.TypeDescriptor
	about                    *RestRoute
	methodGetAll             *ggt.MethodDescriptor
	methodGetOne             *ggt.MethodDescriptor
	methodGetMany            *ggt.MethodDescriptor
	methodGetConvertedToInt  *ggt.MethodDescriptor
	methodGetConvertedToBool *ggt.MethodDescriptor
	methodGetMaybe           *ggt.MethodDescriptor
}

// NewRestRouteDescriptor describe a *RestRoute
func NewRestRouteDescriptor(about *RestRoute) *RestRouteDescriptor {
	ret := &RestRouteDescriptor{about: about}
	ret.methodGetAll = &ggt.MethodDescriptor{
		Name:    "GetAll",
		Handler: about.GetAll,
		Route:   "GetAll",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetAll)
	ret.methodGetOne = &ggt.MethodDescriptor{
		Name:    "GetOne",
		Handler: about.GetOne,
		Route:   "GetOne",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetOne)
	ret.methodGetMany = &ggt.MethodDescriptor{
		Name:    "GetMany",
		Handler: about.GetMany,
		Route:   "GetMany",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMany)
	ret.methodGetConvertedToInt = &ggt.MethodDescriptor{
		Name:    "GetConvertedToInt",
		Handler: about.GetConvertedToInt,
		Route:   "GetConvertedToInt",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToInt)
	ret.methodGetConvertedToBool = &ggt.MethodDescriptor{
		Name:    "GetConvertedToBool",
		Handler: about.GetConvertedToBool,
		Route:   "GetConvertedToBool",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetConvertedToBool)
	ret.methodGetMaybe = &ggt.MethodDescriptor{
		Name:    "GetMaybe",
		Handler: about.GetMaybe,
		Route:   "GetMaybe",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetMaybe)
	return ret
}

// GetAll returns a MethodDescriptor
func (t *RestRouteDescriptor) GetAll() *ggt.MethodDescriptor { return t.methodGetAll }

// GetOne returns a MethodDescriptor
func (t *RestRouteDescriptor) GetOne() *ggt.MethodDescriptor { return t.methodGetOne }

// GetMany returns a MethodDescriptor
func (t *RestRouteDescriptor) GetMany() *ggt.MethodDescriptor { return t.methodGetMany }

// GetConvertedToInt returns a MethodDescriptor
func (t *RestRouteDescriptor) GetConvertedToInt() *ggt.MethodDescriptor {
	return t.methodGetConvertedToInt
}

// GetConvertedToBool returns a MethodDescriptor
func (t *RestRouteDescriptor) GetConvertedToBool() *ggt.MethodDescriptor {
	return t.methodGetConvertedToBool
}

// GetMaybe returns a MethodDescriptor
func (t *RestRouteDescriptor) GetMaybe() *ggt.MethodDescriptor { return t.methodGetMaybe }
