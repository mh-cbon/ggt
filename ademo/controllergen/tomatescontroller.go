package controllergen

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	"github.com/gorilla/mux"
	controller "github.com/mh-cbon/ggt/ademo/controller"
	model "github.com/mh-cbon/ggt/ademo/model"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// TomatesController is an httper of Tomates.
// Tomates controller.
type TomatesController struct {
	embed controller.Tomates
}

// NewTomatesController constructs an httper of Tomates
func NewTomatesController(embed controller.Tomates) *TomatesController {
	ret := &TomatesController{
		embed: embed,
	}
	return ret
}

// GetByID invoke Tomates.GetByID using the request body as a json payload.
// GetByID read the Tomate of given ID
func (t *TomatesController) GetByID(w http.ResponseWriter, r *http.Request) {

	xxURLValues := r.URL.Query()
	var getID string
	if _, ok := xxURLValues["id"]; ok {
		xxTmpgetID := xxURLValues.Get("id")
		getID = xxTmpgetID
	}

	jsonResBody, err := t.embed.GetByID(getID)

	if err != nil {

		t.embed.Finalizer(w, r, err)

		return
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

}

// Create invoke Tomates.Create using the request body as a json payload.
// Create a new Tomate
func (t *TomatesController) Create(w http.ResponseWriter, r *http.Request) {

	{
		err := r.ParseForm()

		if err != nil {

			t.embed.Finalizer(w, r, err)

			return
		}

	}
	var postColor *string
	if _, ok := r.Form["color"]; ok {
		xxTmppostColor := r.FormValue("color")
		postColor = &xxTmppostColor
	}

	jsonResBody, err := t.embed.Create(postColor)

	if err != nil {

		t.embed.Finalizer(w, r, err)

		return
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

}

// Update invoke Tomates.Update using the request body as a json payload.
// Update an existing Tomate
//
// @route /write/{id:[0-9]+}
func (t *TomatesController) Update(w http.ResponseWriter, r *http.Request) {

	xxRouteVars := mux.Vars(r)
	var routeID string
	if _, ok := xxRouteVars["id"]; ok {
		xxTmprouteID := xxRouteVars["id"]
		routeID = xxTmprouteID
	}
	var jsonReqBody *model.Tomate
	{
		jsonReqBody = &model.Tomate{}
		decErr := json.NewDecoder(r.Body).Decode(jsonReqBody)

		if decErr != nil {

			t.embed.Finalizer(w, r, decErr)

			return
		}

		defer r.Body.Close()
	}

	jsonResBody, err := t.embed.Update(routeID, jsonReqBody)

	if err != nil {

		t.embed.Finalizer(w, r, err)

		return
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

}

// TomatesControllerDescriptor describe a *TomatesController
type TomatesControllerDescriptor struct {
	ggt.TypeDescriptor
	about         *TomatesController
	methodGetByID *ggt.MethodDescriptor
	methodCreate  *ggt.MethodDescriptor
	methodUpdate  *ggt.MethodDescriptor
}

// NewTomatesControllerDescriptor describe a *TomatesController
func NewTomatesControllerDescriptor(about *TomatesController) *TomatesControllerDescriptor {
	ret := &TomatesControllerDescriptor{about: about}
	ret.methodGetByID = &ggt.MethodDescriptor{
		Name:    "GetByID",
		Handler: about.GetByID,
		Route:   "GetByID",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodGetByID)
	ret.methodCreate = &ggt.MethodDescriptor{
		Name:    "Create",
		Handler: about.Create,
		Route:   "Create",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodCreate)
	ret.methodUpdate = &ggt.MethodDescriptor{
		Name:    "Update",
		Handler: about.Update,
		Route:   "/write/{id:[0-9]+}",
		Methods: []string{},
	}
	ret.TypeDescriptor.Register(ret.methodUpdate)
	return ret
}

// GetByID returns a MethodDescriptor
func (t *TomatesControllerDescriptor) GetByID() *ggt.MethodDescriptor { return t.methodGetByID }

// Create returns a MethodDescriptor
func (t *TomatesControllerDescriptor) Create() *ggt.MethodDescriptor { return t.methodCreate }

// Update returns a MethodDescriptor
func (t *TomatesControllerDescriptor) Update() *ggt.MethodDescriptor { return t.methodUpdate }
