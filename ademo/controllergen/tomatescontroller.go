package controllergen

// file generated by
// github.com/mh-cbon/ggt
// do not edit

import (
	json "encoding/json"
	controller "github.com/mh-cbon/ggt/ademo/controller"
	ggt "github.com/mh-cbon/ggt/lib"
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// TomatesController is an httper of Tomates.
//

type TomatesController struct {
	embed controller.Tomates
}

// NewTomatesController constructs an httper of Tomates
func NewTomatesController(embed controller.Tomates) *TomatesController {
	ret := &TomatesController{
		embed: embed,
	}
	return ret
}

// GetById invoke Tomates.GetById using the request body as a json payload.
//

func (t *TomatesController) GetById(w http.ResponseWriter, r *http.Request) {

	xxUrlValues := r.URL.Query()
	var getID string

	if _, ok := xxUrlValues["id"]; ok {
		xxTmpgetID := xxUrlValues.Get("id")
		getID = xxTmpgetID
	}

	jsonResBody, err := t.embed.GetById(getID)

	if err != nil {

		t.embed.Finalizer(w, r, err)

		return
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

}

// Create invoke Tomates.Create using the request body as a json payload.
//

func (t *TomatesController) Create(w http.ResponseWriter, r *http.Request) {

	{
		err := r.ParseForm()

		if err != nil {

			t.embed.Finalizer(w, r, err)

			return
		}

	}
	var postColor string

	if _, ok := r.Form["color"]; ok {
		xxTmppostColor := r.FormValue("color")
		postColor = xxTmppostColor
	}

	jsonResBody, err := t.embed.Create(postColor)

	if err != nil {

		t.embed.Finalizer(w, r, err)

		return
	}

	{
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		encErr := json.NewEncoder(w).Encode(jsonResBody)

		if encErr != nil {

			t.embed.Finalizer(w, r, encErr)

			return
		}

	}

}

func TomatesControllerMethodSet(t *TomatesController) ggt.MethodSet {
	var ret = ggt.NewMethodSet()

	ret = ret.Register(func(x interface{}) http.HandlerFunc { return x.(*TomatesController).GetById }, "GetById", "GetById", []string{})

	ret = ret.Register(func(x interface{}) http.HandlerFunc { return x.(*TomatesController).Create }, "Create", "Create", []string{})

	return ret
}
